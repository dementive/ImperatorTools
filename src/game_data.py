# Static Imperator Rome game data used in for autocomplete, documentation on hover, and more

import sublime
from .game_object_manager import GameObjectManager

country_event = """
${1:NAMESPACE}.${2:NUM} = {
    type = country_event
    title = ${1:NAMESPACE}.${2:NUM}.t
    desc = ${1:NAMESPACE}.${2:NUM}.desc
    picture = aqueducts
    
    left_portrait = current_ruler

    trigger = {
    
    }

    immediate = {

    }

    option = {      
        name = ${1:NAMESPACE}.${2:NUM}.a
    }
    option = {      
        name = ${1:NAMESPACE}.${2:NUM}.b
    }
}
"""

class GameData:
    """Class to hold all data generated from the base game logs"""

    def __init__(self):
        # Manually added lists, add custom stuff here
        # TODO - make these actually work
        manager = GameObjectManager()
        self.CustomTriggersList = {}
        self.CustomEffectsList = {}
        self.CustomScopesList = {
            "nand": "a negated AND trigger<br>Supported Scopes: none",
            "nor": "a negated OR trigger<br>Supported Scopes: none",
            "not": "negates content of trigger<br>Supported Scopes: none",
            "or": "at least one entry inside trigger must be true<br>Supported Scopes: none",
            "NAND": "a negated AND trigger<br>Supported Scopes: none",
            "NOR": "a negated OR trigger<br>Supported Scopes: none",
            "NOT": "negates content of trigger<br>Supported Scopes: none",
            "OR": "at least one entry inside trigger must be true<br>Supported Scopes: none",
        }
        # Values for fields in common\prices
        self.PricesDict = {
            "political_influence": "Ex: political_influence = 50",
            "manpower": "Ex: manpower = 3 - would cost 3000 manpower",
            "tyranny": "Ex: tyranny = 3",
            "gold": "Ex: gold = 250",
            "scaled_gold": "scaled_gold = 0.15 - 15% monthly income",
            "scaled_manpower": "Ex: scaled_manpower = 0.15 - 15% of current manpower",
            "stability": "Ex: stability = 25",
            "aggressive_expansion": "Ex: aggressive_expansion = 25",
            "innovations": "Ex: innovations = 2 - would cost 2 innovations",
            "military_experience": "Ex: military_experience = 50",
            "war_exhaustion": "Ex: war_exhaustion = 10",
        }
        self.EventsList = {
            1: {
                "trigger": "country_event",
                "completion": country_event,
                "kind": (sublime.KIND_ID_SNIPPET, "S", "Country Event"),
                "annotation":"Event Template",
                "details": "Create a basic country event",
            },
            2: {
                "trigger": "type",
                "completion": "type" + " = ${1:country_event}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Event Type",
                "details": "Defines the root scope the event fires in",
            },
            3: {
                "trigger": "title",
                "completion": "title" + " = ${1:event_title}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Title",
                "details": "The title to show in the event window",
            },
            4: {
                "trigger": "desc",
                "completion": "desc" + " = ${1:event_desc}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Description",
                "details": "The description to show in the event window",
            },
            5: {
                "trigger": "desc_extended",
                "completion": "desc = {\n\t"
                + "first_valid = {\n\t\t"
                + 'triggered_desc = {\n\t\t\ttrigger = { always = yes }\n\t\t\tdesc = "desc_1"\n\t\t}\n\t\ttriggered_desc = {\n\t\t\ttrigger = { treasury > 50 }\n\t\t\tdesc = "desc_2"\n\t\t}\n\t}\n}',
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Multiple Descriptions",
                "details": "Show 1 description from many descriptions based on a trigger",
            },
            6: {
                "trigger": "picture",
                "completion": "picture" + " = ${1:aqueducts}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Picture",
                "details": "Picture to show in the event window, keys from event_pictures",
            },
            7: {
                "trigger": "hidden",
                "completion": "hidden" + " = ${1:yes}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Hidden",
                "details": "Hides an event from the player",
            },
            8: {
                "trigger": "goto_location",
                "completion": "goto_location" + " = ${1:capital_scope}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Goto Location",
                "details": "Adds a button that pans to a location to an event",
            },
            9: {
                "trigger": "left_portrait",
                "completion": "left_portrait" + " = ${1:current_ruler}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Left Portrait",
                "details": "Shows a character in an event on the left",
            },
            10: {
                "trigger": "right_portrait",
                "completion": "right_portrait" + " = ${1:current_ruler}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Right Portrait",
                "details": "Shows a character in an event on the right",
            },
            11: {
                "trigger": "fire_only_once",
                "completion": "fire_only_once" + " = ${1:yes}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Fire Only Once",
                "details": "Makes it so an event can only fire one time",
            },
            12: {
                "trigger": "weight_multiplier",
                "completion": "weight_multiplier"
                + " = {\n\tmodifier = {\n\t\tfactor = 2\n\t\tnum_of_cities &ge; 20\n\t}\n\tmodifier = {\n\t\tfactor = 2\n\t\tnum_of_cities &ge; 30\n\t}\n}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Weight",
                "details": "Weight for a event to fire, uses MTTH syntax",
            },
            13: {
                "trigger": "trigger",
                "completion": "trigger" + " = {\n\t${1:}\n}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Trigger",
                "details": "Trigger that is checked to see if event should be fired",
            },
            14: {
                "trigger": "immediate",
                "completion": "immediate" + " = {\n\t${1:}\n}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Immediate",
                "details": "Effects to run as soon as the event fires, save scopes and set variables here.",
            },
            15: {
                "trigger": "option",
                "completion": "option" + " = {\n\tname = ${1:option_name.a}\n}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"Option",
                "details": "Option that the player can pick to resolve an event",
            },
            16: {
                "trigger": "after",
                "completion": "after" + " = {\n\t${1:}\n}",
                "kind": (sublime.KIND_ID_TYPE, "E", "Event Parameter"),
                "annotation":"After",
                "details": "Effects to run after an option has been picked",
           },
        }
        # Everything below this is generated, don't change without scripts
        self.EffectsList = {
            "enable_ability": "Enable a unit ability for a country.<br>Note: A trigger also has to be added to the ability for it to work.<br><code>enable_ability = military_colonies</code>",
            "add_state_food": "adds food to a State<br><code>add_state_food = 250</code><br>Supported Scopes: state",
            "add_state_modifier": "adds a modifier from a State<br>Supported Scopes: state",
            "every_state_province": "Iterate through all provinces in a state<br>every_state_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: state<br>Supported Targets: province",
            "ordered_state_province": "Iterate through all provinces in a state<br>ordered_state_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: state<br>Supported Targets: province",
            "random_state_province": "Iterate through all provinces in a state<br>random_state_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: state<br>Supported Targets: province",
            "remove_state_modifier": "Removes a modifier from a State<br>Supported Scopes: state",
            "set_state_capital": "Changes the capital of a state<br>Supported Scopes: state<br>Supported Targets: province",
            "adapt_family_name": "changes scoped characters surname to reflect on their current family<br><code>adapt_family_name = yes</code><br>Supported Scopes: character",
            "add_as_governor": "Character becomes a governor<br><code>add_as_governor = p:1.governorship</code><br>Supported Scopes: character<br>Supported Targets: governorship",
            "add_character_experience": "adds or subtracts experience from a character<br><code>add_character_experience = 10</code><br>Supported Scopes: character",
            "add_character_modifier": "adds a modifier to a Character<br>Supported Scopes: character",
            "add_corruption": "gives (or takes) Corruption to a character<br><code>add_corruption = 10</code><br>Supported Scopes: character",
            "add_friend": "Adds a friend to the character<br>Supported Scopes: character<br>Supported Targets: character",
            "add_gold": "gives (or takes) gold to a character<br><code>add_gold = -250</code><br>Supported Scopes: character",
            "add_health": "adds or subtracts health from a character<br><code>add_health = -10</code><br>Supported Scopes: character",
            "add_holding": "Adds the province as a holding to a character<br><code>add_holding = p:1</code><br>Supported Scopes: character<br>Supported Targets: province",
            "add_loyal_veterans": "Adds Loyal Veterans to a character<br><code>add_loyal_veterans = 10</code><br>Supported Scopes: character",
            "add_loyalty": "Adds an Loyalty modifier, add_loyalty = X<br>X is a scripted modifier name. <br>Supported Scopes: character",
            "add_nickname": "gives a nickname to a character<br><code>add_nickname = NICKNAME_BLANK</code><br>Supported Scopes: character",
            "add_party_conviction": "adds party conviction for a character<br>Supported Scopes: character",
            "add_popularity": "gives (or takes) Popularity to a character<br>Supported Scopes: character",
            "add_prominence": "gives (or takes) Prominence to a character<br>Supported Scopes: character",
            "add_rival": "Adds a rival to the character<br>Supported Scopes: character<br>Supported Targets: character",
            "add_ruler_conviction": "Adds ruler conviction<br>Supported Scopes: character",
            "add_trait": "Adds a trait to a character<br>Supported Scopes: character",
            "add_triggered_character_modifier": "adds a cancellable modifier to a Character<br>Supported Scopes: character",
            "adopt": "Makes the currently scoped character adopt another character<br>Supported Scopes: character<br>Supported Targets: character",
            "banish": "Banishes a character to another country<br>Supported Scopes: character<br>Supported Targets: country",
            "change_mercenary_employer": "Changes a characters employer, if they are mecenary<br>Supported Scopes: character<br>Supported Targets: country",
            "clear_ambition": "Clear the ambition for this character<br>Supported Scopes: character",
            "death": "kills a character, death = { killer = X death_reason = Y }, where X is a character and Y is one of the death reason keys<br>Supported Scopes: character",
            "death_reason": "The reason a character was killed by the death effect",
            "deify_character": "Deifies a character for a given 'deity' and 'country'.<br>Supported Scopes: character<br>Supported Targets: country",
            "divorce_character": "Divorces two characters<br>Supported Scopes: character<br>Supported Targets: character",
            "end_pregnancy": "end a pregnancy<br>Supported Scopes: character",
            "every_character_treasure": "Iterate through all character heirlooms<br>every_character_treasure = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: treasure",
            "every_character_unit": "units commanded by a character<br>every_character_unit = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: unit",
            "every_child": "Iterate through all children<br>every_child = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "every_friend": "Iterate through all friends<br>every_friend = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "every_governor_state": "Iterate through all states a governor is governor of<br>every_governor_state = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: state",
            "every_holdings": "Iterate through all holdings of a character<br>every_holdings = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: province",
            "every_parent": "Executes on every parent<br>Supported Scopes: character",
            "every_rival": "Iterate through all Rivals<br>every_rival = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "every_sibling": "Iterate through all siblings<br>every_sibling = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "every_support_as_heir": "Iterate through all supportasHeir<br>every_support_as_heir = { limit = { [triggers] } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "force_add_trait": "Adds a trait to a character (will show tooltip even if already having the trait)<br>Supported Scopes: character",
            "give_office": "Gives a Office to a character<br>Supported Scopes: character",
            "marry_character": "Marries two characters<br>Supported Scopes: character<br>Supported Targets: character",
            "move_country": "Moves a character to another country (without message_popups)<br>Supported Scopes: character<br>Supported Targets: country",
            "move_country_with_message": "Moves a character to another country (with message popups)<br>Supported Scopes: character<br>Supported Targets: country",
            "ordered_character_treasure": "Iterate through all character heirlooms<br>ordered_character_treasure = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: treasure",
            "ordered_character_unit": "units commanded by a character<br>ordered_character_unit = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: unit",
            "ordered_child": "Iterate through all children<br>ordered_child = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "ordered_friend": "Iterate through all friends<br>ordered_friend = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "ordered_governor_state": "Iterate through all states a governor is governor of<br>ordered_governor_state = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: state",
            "ordered_holdings": "Iterate through all holdings of a character<br>ordered_holdings = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: province",
            "ordered_rival": "Iterate through all Rivals<br>ordered_rival = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "ordered_sibling": "Iterate through all siblings<br>ordered_sibling = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "ordered_support_as_heir": "Iterate through all supportasHeir<br>ordered_support_as_heir = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "pay_gold": "the scope character pays gold to the target character, pay_gold = { target = X gold = Y }<br>Supported Scopes: character",
            "random_character_treasure": "Iterate through all character heirlooms<br>random_character_treasure = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: treasure",
            "random_character_unit": "units commanded by a character<br>random_character_unit = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: unit",
            "random_child": "Iterate through all children<br>random_child = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "random_friend": "Iterate through all friends<br>random_friend = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "random_governor_state": "Iterate through all states a governor is governor of<br>random_governor_state = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: state",
            "random_holdings": "Iterate through all holdings of a character<br>random_holdings = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: province",
            "random_parent": "Executes on a random parent<br>Supported Scopes: character",
            "random_rival": "Iterate through all Rivals<br>random_rival = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "random_sibling": "Iterate through all siblings<br>random_sibling = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "random_support_as_heir": "Iterate through all supportasHeir<br>random_support_as_heir = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: character<br>Supported Targets: character",
            "remove_all_offices": "Removes all Offices from a character<br>Supported Scopes: character",
            "remove_as_governor": "Character stops being a governor<br>Supported Scopes: character",
            "remove_as_mercenary": "Character stops being a Mercenary<br>Supported Scopes: character",
            "remove_as_researcher": "Character stops being a researcher<br>Supported Scopes: character",
            "remove_character_modifier": "Removes a modifier from a Character<br>Supported Scopes: character",
            "remove_command": "Removes command from a character<br>Supported Scopes: character",
            "remove_friend": "Removes a friend from the character<br>Supported Scopes: character<br>Supported Targets: character",
            "remove_holding": "Removes the province as a holding to a character<br>Supported Scopes: character<br>Supported Targets: province",
            "remove_loyalty": "Removes an Loyalty modifier, remove_loyalty = X<br>X is a scripted modifier name. <br>Supported Scopes: character",
            "remove_office": "Removes a Office from a character<br>Supported Scopes: character",
            "remove_rival": "Removes a rival from the character<br>Supported Scopes: character<br>Supported Targets: character",
            "remove_trait": "Removes a trait from a character<br>Supported Scopes: character",
            "remove_triggered_character_modifier": "Removes a triggered modifier from a Character<br>Supported Scopes: character",
            "set_ambition": "Set the ambition for this character<br>Supported Scopes: character",
            "set_as_minor_character": "changes scoped characters family to the minor, making them a 'minor' character<br>Supported Scopes: character<br>Supported Targets: character",
            "set_character_religion": "Set the religion for this character<br>Supported Scopes: character<br>Supported Targets: religion",
            "set_culture": "Set the culture for this character<br>Supported Scopes: character<br>Supported Targets: culture",
            "set_culture_same_as": "sets the culture of the character to be the same as the culture of the target<br>Supported Scopes: character<br>Supported Targets: character",
            "set_family": "Sets the Family of the character<br>Supported Scopes: character<br>Supported Targets: family",
            "set_firstname": "changes the first name of a character<br>Supported Scopes: character",
            "set_home_country": "changes country of origin<br>Supported Scopes: character<br>Supported Targets: country",
            "set_party_leader": "sets the leader for a faction in a country<br>Supported Scopes: character",
            "update_character": "Forces a reclaculation of a character's modifiers and status<br>Supported Scopes: character",
            "add_legion_history": "adds some history for this legion<br>Supported Scopes: character, unit, legion",
            "add_to_legion": "add {unit, character} to specific legion. If unit:commander cannot be moved to legion, it will lose its job. If character cannot be moved to legion, the command is invalid.<br>Supported Scopes: character, unit<br>Supported Targets: legion",
            "disband_legion": "creates a legion for governorship without deducting price<br>Supported Scopes: governorship",
            "every_governorship_state": "Iterate through all states in a governorship<br>every_governorship_state = { limit = { [triggers] } [effects] }<br>Supported Scopes: governorship<br>Supported Targets: state",
            "ordered_governorship_state": "Iterate through all states in a governorship<br>ordered_governorship_state = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: governorship<br>Supported Targets: state",
            "raise_legion": "creates a legion for governorship without deducting price<br>Supported Scopes: governorship<br>Supported Targets: legion",
            "random_governorship_state": "Iterate through all states in a governorship<br>random_governorship_state = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: governorship<br>Supported Targets: state",
            "destroy_treasure": "destroys a treasure<br>Supported Scopes: treasure",
            "transfer_treasure_to_character": "transfers a treasure from current owner to new owner (character)<br>Supported Scopes: treasure<br>Supported Targets: character",
            "transfer_treasure_to_country": "transfers a treasure from current owner to new owner (country)<br>Supported Scopes: treasure<br>Supported Targets: country",
            "transfer_treasure_to_province": "transfers a treasure from current owner to new owner (province)<br>Supported Scopes: treasure<br>Supported Targets: province",
            "add_aggressive_expansion": "adds or removes aggressive expansion for a country<br>Supported Scopes: country",
            "add_alliance": "Country in scope gets an alliance with the target<br>Supported Scopes: country<br>Supported Targets: country",
            "add_centralization": "gives (or takes) centralization to a country<br>Supported Scopes: country",
            "add_country_modifier": "adds a modifier from a country<br>Supported Scopes: country",
            "add_guarantee": "Country in scope gurantees the target<br>Supported Scopes: country<br>Supported Targets: country",
            "add_innovation": "adds N innovations<br>Supported Scopes: country",
            "add_legitimacy": "gives (or takes) Legitimacy to a country<br>Supported Scopes: country",
            "add_manpower": "gives (or takes) Manpower to a country<br>Supported Scopes: country",
            "add_military_access": "Country in scope gets military access through the target<br>Supported Scopes: country<br>Supported Targets: country",
            "add_military_experience": "gives (or takes) military experience to a country<br>Supported Scopes: country",
            "add_new_family": "adds a new family with the specified name (must be valid from culture files)<br>Supported Scopes: country",
            "add_opinion": "Adds an opinion modifier, add_opinion = { modifier = X  target = Z  }<br>X is a scripted modifier name. <br>Supported Scopes: country",
            "add_party_approval": "adds party approval for a country<br>Supported Scopes: country",
            "add_political_influence": "gives (or takes) political influence to a country<br>Supported Scopes: country",
            "add_research": "adds research for a country { technology = table value = percent(0-100) }<br>Supported Scopes: country",
            "add_stability": "gives (or takes) Stability to a country<br>Supported Scopes: country",
            "add_to_war": "adds country to target war, target = SCOPE_WAR, attacker = BOOL, leader = BOOL<br>Supported Scopes: country",
            "add_treasury": "gives (or takes) Treasury to a country<br>Supported Scopes: country",
            "add_truce": "adds a truce for a country towards another country<br>Supported Scopes: country",
            "add_tyranny": "gives (or takes) Tyranny to a country<br>Supported Scopes: country",
            "add_war_exhaustion": "gives (or takes) war exhaustion to a country<br>Supported Scopes: country",
            "change_country_adjective": "changes the adjective of a country<br>Supported Scopes: country",
            "change_country_color": "changes the color of a country<br>Supported Scopes: country",
            "change_country_flag": "changes the flag of a country<br>Supported Scopes: country",
            "change_country_name": "changes the name of a country<br>Supported Scopes: country",
            "change_country_tag": "changes the historical tag of a country<br>Supported Scopes: country",
            "change_government": "Removes a modifier from a country<br>Supported Scopes: country",
            "change_law": "Changes a law in a country<br>Supported Scopes: country",
            "create_character": "creates a character in a country<br>Supported Scopes: country<br>Supported Targets: character",
            "create_country_treasure": "creates a treasure in a country<br>Supported Scopes: country<br>Supported Targets: treasure",
            "create_family": "creates a family for the target character<br>Supported Scopes: country<br>Supported Targets: character",
            "declare_war_with_wargoal": "Declares a war between this country and the target country<br>Supported Scopes: country",
            "every_allied_country": "Iterate through all allied countries<br>every_allied_country = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "every_army": "Iterate through all armies in a country<br>every_army = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "every_available_deity": "Iterate through all deity that a country can change to<br>every_available_deity = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "every_character": "Iterate through all (major + minor) characters in a country<br>every_character = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "every_commander": "Iterate through all commanders in a country<br>every_commander = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "every_countries_at_war_with": "Iterate through all countries at war with<br>every_countries_at_war_with = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "every_country_culture": "Iterate through all country cultures in the country<br>every_country_culture = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "every_country_state": "Iterate through all states in a country<br>every_country_state = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: state",
            "every_country_sub_unit": "Iterate through all subunits in all units in a country<br>every_country_sub_unit = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: subunit",
            "every_country_treasure": "Iterate through all treasures in a country<br>every_country_treasure = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: treasure",
            "every_current_war": "Iterate through all current country wars<br>every_current_war = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: war",
            "every_family": "Iterate through all families in a country<br>every_family = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: family",
            "every_governorships": "Iterate through all governorships of a country<br>every_governorships = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: governorship",
            "every_integrated_culture": "Iterate through all integrated country cultures<br>every_integrated_culture = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "every_legion": "legion in country<br>every_legion = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: legion",
            "every_navy": "Iterate through all navies in a country<br>every_navy = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "every_neighbour_country": "Iterate through all neighbour countries<br>every_neighbour_country = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "every_owned_holy_site": "All holy sites in a country<br>every_owned_holy_site = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "every_owned_province": "Iterate through all owned provinces in a country<br>every_owned_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "every_pantheon_deity": "Iterate through all (valid) pantheon deities<br>every_pantheon_deity = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "every_party": "Iterate through all existing parties in a country<br>every_party = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: party",
            "every_subject": "Iterate through all subject countries<br>every_subject = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "every_successor": "Iterate through all successors in a country<br>every_successor = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "every_unit": "Iterate through all units in a country<br>every_unit = { limit = { [triggers] } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "imprison": "Imprisons the target character as this character's prisoner, imprison = { target = X  }, where X is a character<br>Supported Scopes: country",
            "integrate_country_culture": "Integrates a country culture in a country<br>Supported Scopes: country<br>Supported Targets: country culture",
            "make_subject": "makes the target a subject of the current scope<br>Supported Scopes: country",
            "ordered_allied_country": "Iterate through all allied countries<br>ordered_allied_country = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "ordered_army": "Iterate through all armies in a country<br>ordered_army = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "ordered_available_deity": "Iterate through all deity that a country can change to<br>ordered_available_deity = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "ordered_character": "Iterate through all (major + minor) characters in a country<br>ordered_character = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "ordered_commander": "Iterate through all commanders in a country<br>ordered_commander = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "ordered_countries_at_war_with": "Iterate through all countries at war with<br>ordered_countries_at_war_with = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "ordered_country_culture": "Iterate through all country cultures in the country<br>ordered_country_culture = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "ordered_country_state": "Iterate through all states in a country<br>ordered_country_state = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: state",
            "ordered_country_sub_unit": "Iterate through all subunits in all units in a country<br>ordered_country_sub_unit = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: subunit",
            "ordered_country_treasure": "Iterate through all treasures in a country<br>ordered_country_treasure = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: treasure",
            "ordered_current_war": "Iterate through all current country wars<br>ordered_current_war = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: war",
            "ordered_family": "Iterate through all families in a country<br>ordered_family = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: family",
            "ordered_governorships": "Iterate through all governorships of a country<br>ordered_governorships = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: governorship",
            "ordered_integrated_culture": "Iterate through all integrated country cultures<br>ordered_integrated_culture = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "ordered_legion": "legion in country<br>ordered_legion = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: legion",
            "ordered_navy": "Iterate through all navies in a country<br>ordered_navy = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "ordered_neighbour_country": "Iterate through all neighbour countries<br>ordered_neighbour_country = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "ordered_owned_holy_site": "All holy sites in a country<br>ordered_owned_holy_site = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "ordered_owned_province": "Iterate through all owned provinces in a country<br>ordered_owned_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "ordered_pantheon_deity": "Iterate through all (valid) pantheon deities<br>ordered_pantheon_deity = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "ordered_party": "Iterate through all existing parties in a country<br>ordered_party = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: party",
            "ordered_subject": "Iterate through all subject countries<br>ordered_subject = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "ordered_successor": "Iterate through all successors in a country<br>ordered_successor = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "ordered_unit": "Iterate through all units in a country<br>ordered_unit = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "pay_price": "Pays a Price from a country<br>Supported Scopes: country",
            "random_allied_country": "Iterate through all allied countries<br>random_allied_country = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "random_army": "Iterate through all armies in a country<br>random_army = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "random_available_deity": "Iterate through all deity that a country can change to<br>random_available_deity = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "random_character": "Iterate through all (major + minor) characters in a country<br>random_character = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "random_commander": "Iterate through all commanders in a country<br>random_commander = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "random_countries_at_war_with": "Iterate through all countries at war with<br>random_countries_at_war_with = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "random_country_culture": "Iterate through all country cultures in the country<br>random_country_culture = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "random_country_state": "Iterate through all states in a country<br>random_country_state = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: state",
            "random_country_sub_unit": "Iterate through all subunits in all units in a country<br>random_country_sub_unit = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: subunit",
            "random_country_treasure": "Iterate through all treasures in a country<br>random_country_treasure = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: treasure",
            "random_current_war": "Iterate through all current country wars<br>random_current_war = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: war",
            "random_family": "Iterate through all families in a country<br>random_family = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: family",
            "random_governorships": "Iterate through all governorships of a country<br>random_governorships = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: governorship",
            "random_integrated_culture": "Iterate through all integrated country cultures<br>random_integrated_culture = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "random_legion": "legion in country<br>random_legion = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: legion",
            "random_navy": "Iterate through all navies in a country<br>random_navy = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "random_neighbour_country": "Iterate through all neighbour countries<br>random_neighbour_country = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "random_owned_holy_site": "All holy sites in a country<br>random_owned_holy_site = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "random_owned_province": "Iterate through all owned provinces in a country<br>random_owned_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: province",
            "random_pantheon_deity": "Iterate through all (valid) pantheon deities<br>random_pantheon_deity = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "random_party": "Iterate through all existing parties in a country<br>random_party = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: party",
            "random_subject": "Iterate through all subject countries<br>random_subject = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: country",
            "random_successor": "Iterate through all successors in a country<br>random_successor = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: character",
            "random_unit": "Iterate through all units in a country<br>random_unit = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "recalc_succession": "forces a recalculation of succession<br>Supported Scopes: country",
            "refund_price": "Refunds a Price from a country<br>Supported Scopes: country",
            "release_prisoner": "Release the target character if imprisoned, release_prisoner = { target = X  }, where X is a character<br>Supported Scopes: country",
            "release_subject": "Makes the target country stop being a subject of the scoped country<br>Supported Scopes: country<br>Supported Targets: country",
            "remove_country_modifier": "Removes a modifier from a country<br>Supported Scopes: country",
            "remove_gurantee": "Country in scope stop guranteeing the target<br>Supported Scopes: country<br>Supported Targets: country",
            "remove_opinion": "Removes an opinion modifier, remove_opinion = { modifier = X  target = Z  }<br>X is a scripted modifier name. <br>Supported Scopes: country",
            "remove_party_leadership": "remove the leader from a party in a country<br>Supported Scopes: country",
            "reverse_add_opinion": "Adds an reverse opinion modifier, reverse_add_opinion = { modifier = X target = Z }<br>X is a scripted modifier name.<br>Supported Scopes: country",
            "set_as_coruler": "sets the coruler of a country to the specified character<br>Supported Scopes: country<br>Supported Targets: character",
            "set_as_ruler": "sets the ruler of a country to the specified character<br>Supported Scopes: country<br>Supported Targets: character",
            "set_capital": "Changes the capital of a country<br>Supported Scopes: country<br>Supported Targets: province",
            "set_country_heritage": "Set the heritage of a newly created country<br>Supported Scopes: country",
            "set_country_religion": "Sets religion for a country<br>Supported Scopes: country",
            "set_gender_equality": "sets gender equality for a country<br>Supported Scopes: country",
            "set_graphical_culture": "sets the graphical culture of a country<br>Supported Scopes: country",
            "set_ignore_senate_approval": "sets the country to ignore senate approval<br>Supported Scopes: country",
            "set_legion_recruitment": "sets legion recruitment ( disabled, capital OR enabled )<br>Supported Scopes: country",
            "set_primary_culture": "Sets primary culture for a country<br>Supported Scopes: country<br>Supported Targets: culture",
            "start_civil_war": "starts a civil-war in a country, setting a specified character as its leader<br>Supported Scopes: country<br>Supported Targets: character",
            "update_allowed_parties": "country in scope instantly recalculates its allowed parties<br>Supported Scopes: country",
            "every_party_member": "Iterate through all members of a party<br>every_party_member = { limit = { [triggers] } [effects] }<br>Supported Scopes: party<br>Supported Targets: character",
            "ordered_party_member": "Iterate through all members of a party<br>ordered_party_member = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: party<br>Supported Targets: character",
            "pick_random_agenda": "picks a new political objective for party<br>Supported Scopes: party",
            "random_party_member": "Iterate through all members of a party<br>random_party_member = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: party<br>Supported Targets: character",
            "set_party_agenda": "sets political objective for party<br>Supported Scopes: party",
            "add_commander": "add {character} to this legion.<br>Supported Scopes: legion<br>Supported Targets: character",
            "add_distinction": "add a distinction to a legion<br>Supported Scopes: legion",
            "add_legion_unit": "add {character} to this legion.<br>Supported Scopes: legion<br>Supported Targets: unit",
            "every_legion_commander": "commanders in legion<br>every_legion_commander = { limit = { [triggers] } [effects] }<br>Supported Scopes: legion<br>Supported Targets: character",
            "every_legion_unit": "units in legion<br>every_legion_unit = { limit = { [triggers] } [effects] }<br>Supported Scopes: legion<br>Supported Targets: unit",
            "move_legion": "moves legion, characters and units to a new country. Merging legions if necessary<br>Supported Scopes: legion<br>Supported Targets: governorship",
            "ordered_legion_commander": "commanders in legion<br>ordered_legion_commander = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: legion<br>Supported Targets: character",
            "ordered_legion_unit": "units in legion<br>ordered_legion_unit = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: legion<br>Supported Targets: unit",
            "random_legion_commander": "commanders in legion<br>random_legion_commander = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: legion<br>Supported Targets: character",
            "random_legion_unit": "units in legion<br>random_legion_unit = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: legion<br>Supported Targets: unit",
            "remove_commander": "remove {character} from this legion.<br>Supported Scopes: legion<br>Supported Targets: character",
            "remove_distinction": "removes a distinction from a specific legion<br>Supported Scopes: legion",
            "remove_legion_unit": "remove {unit} from this legion.<br>Supported Scopes: legion<br>Supported Targets: unit",
            "add_breach": "adds/removed a breach to the current siege<br>Supported Scopes: siege",
            "every_neighbor_region": "Iterate through all neighbouring regions of a region<br>every_neighbor_region = { limit = { [triggers] } [effects] }<br>Supported Scopes: region<br>Supported Targets: region",
            "every_region_area": "Iterate through all areas in a region<br>every_region_area = { limit = { [triggers] } [effects] }<br>Supported Scopes: region<br>Supported Targets: area",
            "every_region_province": "Iterate through all ownable provinces in a region<br>every_region_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "every_region_province_including_unownable": "Iterate through all provinces in a region<br>every_region_province_including_unownable = { limit = { [triggers] } [effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "every_region_state": "Iterate through all states in a region<br>every_region_state = { limit = { [triggers] } [effects] }<br>Supported Scopes: region<br>Supported Targets: state",
            "ordered_neighbor_region": "Iterate through all neighbouring regions of a region<br>ordered_neighbor_region = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: region<br>Supported Targets: region",
            "ordered_region_area": "Iterate through all areas in a region<br>ordered_region_area = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: region<br>Supported Targets: area",
            "ordered_region_province": "Iterate through all ownable provinces in a region<br>ordered_region_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "ordered_region_province_including_unownable": "Iterate through all provinces in a region<br>ordered_region_province_including_unownable = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "ordered_region_state": "Iterate through all states in a region<br>ordered_region_state = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: region<br>Supported Targets: state",
            "random_neighbor_region": "Iterate through all neighbouring regions of a region<br>random_neighbor_region = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: region<br>Supported Targets: region",
            "random_region_area": "Iterate through all areas in a region<br>random_region_area = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: region<br>Supported Targets: area",
            "random_region_province": "Iterate through all ownable provinces in a region<br>random_region_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "random_region_province_including_unownable": "Iterate through all provinces in a region<br>random_region_province_including_unownable = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: region<br>Supported Targets: province",
            "random_region_state": "Iterate through all states in a region<br>random_region_state = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: region<br>Supported Targets: state",
            "every_area_including_unownable_province": "Iterate through all provinces in an area<br>every_area_including_unownable_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "every_area_province": "Iterate through all ownable provinces in an area<br>every_area_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "every_area_state": "Iterate through all states in an area<br>every_area_state = { limit = { [triggers] } [effects] }<br>Supported Scopes: area<br>Supported Targets: state",
            "every_neighbor_area": "Iterate through all neighbouring areas of a Area<br>every_neighbor_area = { limit = { [triggers] } [effects] }<br>Supported Scopes: area<br>Supported Targets: area",
            "ordered_area_including_unownable_province": "Iterate through all provinces in an area<br>ordered_area_including_unownable_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "ordered_area_province": "Iterate through all ownable provinces in an area<br>ordered_area_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "ordered_area_state": "Iterate through all states in an area<br>ordered_area_state = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: area<br>Supported Targets: state",
            "ordered_neighbor_area": "Iterate through all neighbouring areas of a Area<br>ordered_neighbor_area = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: area<br>Supported Targets: area",
            "random_area_including_unownable_province": "Iterate through all provinces in an area<br>random_area_including_unownable_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "random_area_province": "Iterate through all ownable provinces in an area<br>random_area_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: area<br>Supported Targets: province",
            "random_area_state": "Iterate through all states in an area<br>random_area_state = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: area<br>Supported Targets: state",
            "random_neighbor_area": "Iterate through all neighbouring areas of a Area<br>random_neighbor_area = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: area<br>Supported Targets: area",
            "create_unit": "Creates a Unit with a single cohort for a Country given by the current scope.<br> The cohort will be of the first defined type in the unit type db.<br> Optional properties:<br>  name [string, defaults to generated name]<br>  navy [bool, defaults to no]<br>  mercenary [bool, defaults to no]<br>  location [Province, defaults to capital of country scope]<br>  commander [Character, defaults to none]<br>  attachto [Unit, will not attach by default]<br>  sub_unit [Subunit type name, defaults to default cohort/ship type]<br>Supported Scopes: country, legion<br>Supported Targets: unit",
            "add_food": "gives (or takes) Food to a unit<br>Supported Scopes: unit",
            "add_loyal_subunit": "Adds a subunit to a Unit<br>Supported Scopes: unit",
            "add_morale": "gives (or takes) morale to a unit<br>Supported Scopes: unit",
            "add_subunit": "Adds a subunit to a Unit<br>Supported Scopes: unit",
            "add_unit_modifier": "adds a modifier from a Unit<br>Supported Scopes: unit",
            "change_unit_owner": "Destroys the unit from the current scope<br>Supported Scopes: unit<br>Supported Targets: country",
            "damage_unit_morale_percent": "Applies the given morale damage to each Cohort in the unit as a percentage of their current morale<br>Supported Scopes: unit",
            "damage_unit_percent": "Applies the given damage to each Cohort in the unit as a percentage of their current strength<br>Supported Scopes: unit",
            "destroy_unit": "Destroys the unit from the current scope<br><code>destroy_unit = yes</code><br>Supported Scopes: unit",
            "every_sub_unit": "Iterate through all subunits in a unit<br>every_sub_unit = { limit = { [triggers] } [effects] }<br>Supported Scopes: unit<br>Supported Targets: subunit",
            "lock_unit": "Locks a Unit for the specified number of days<br>Supported Scopes: unit",
            "ordered_sub_unit": "Iterate through all subunits in a unit<br>ordered_sub_unit = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: unit<br>Supported Targets: subunit",
            "random_sub_unit": "Iterate through all subunits in a unit<br>random_sub_unit = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: unit<br>Supported Targets: subunit",
            "remove_unit_loyalty": "Removes the personal loyalty of all cohorts in a unit<br>Supported Scopes: unit",
            "remove_unit_modifier": "Removes a modifier from a Unit<br>Supported Scopes: unit",
            "set_as_commander": "sets the commander of a unit to the specified character<br>Supported Scopes: unit<br>Supported Targets: character",
            "set_unit_size": "Sets the number of people in each Cohort in the Unit to the given percentage of maximum<br>Supported Scopes: unit",
            "split_migrants_to": "split until specified number of migrant sub-units<br>Supported Scopes: unit",
            "unlock_unit": "Unlocks a locked Unit<br>Supported Scopes: unit",
            "kill_pop": "Kill the pop in the current scope<br>Supported Scopes: pop",
            "move_pop": "moves the pop to target province.<br>Supported Scopes: pop<br>Supported Targets: province",
            "set_pop_culture": "Set the culture for this pop<br>Supported Scopes: pop<br>Supported Targets: culture",
            "set_pop_culture_same_as": "sets the culture of the pop to be the same as the culture of the target<br>Supported Scopes: pop<br>Supported Targets: pop",
            "set_pop_religion": "Set the Religion for this pop<br>Supported Scopes: pop<br>Supported Targets: religion",
            "set_pop_religion_same_as": "sets the Religion of the pop to be the same as the Religion of the target<br>Supported Scopes: pop<br>Supported Targets: pop",
            "set_pop_type": "Set the pop_type for this pop<br>Supported Scopes: pop",
            "add_subunit_morale": "gives (or takes) morale to a subunit<br>Supported Scopes: subunit",
            "add_subunit_strength": "gives (or takes) Strength to a subunit<br>Supported Scopes: subunit",
            "destroy_subunit": "Destroys the unit from the current scope<br>Supported Scopes: subunit",
            "remove_subunit_loyalty": "Removes the personal loyalty of a specific subunit<br>Supported Scopes: subunit",
            "set_personal_loyalty": "Sets the personal loyalty of a specific subunit to the target character<br>Supported Scopes: subunit<br>Supported Targets: character",
            "add_prestige": "gives (or takes) Prestige to a family<br>Supported Scopes: family",
            "every_family_member": "Iterate through all members of a family<br>every_family_member = { limit = { [triggers] } [effects] }<br>Supported Scopes: family<br>Supported Targets: character",
            "move_family": "Moves a family to another country<br>Supported Scopes: family<br>Supported Targets: country",
            "ordered_family_member": "Iterate through all members of a family<br>ordered_family_member = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: family<br>Supported Targets: character",
            "random_family_member": "Iterate through all members of a family<br>random_family_member = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: family<br>Supported Targets: character",
            "remove_family": "Destroys a family, will remove them from the origin country<br>Supported Scopes: family<br>Supported Targets: country",
            "force_white_peace": "Ends a war in a white peace<br>Supported Scopes: country, war<br>Supported Targets: war",
            "every_war_attacker": "Iterate through all attackers in a war<br>every_war_attacker = { limit = { [triggers] } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "every_war_defender": "Iterate through all war defenders<br>every_war_defender = { limit = { [triggers] } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "every_war_participant": "Iterate through all war participants<br>every_war_participant = { limit = { [triggers] } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "ordered_war_attacker": "Iterate through all attackers in a war<br>ordered_war_attacker = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "ordered_war_defender": "Iterate through all war defenders<br>ordered_war_defender = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "ordered_war_participant": "Iterate through all war participants<br>ordered_war_participant = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "random_war_attacker": "Iterate through all attackers in a war<br>random_war_attacker = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "random_war_defender": "Iterate through all war defenders<br>random_war_defender = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "random_war_participant": "Iterate through all war participants<br>random_war_participant = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: war<br>Supported Targets: country",
            "remove_from_war": "Removes a country from a war, if the country is warleader the war ends in a white peace.<br>Supported Scopes: war<br>Supported Targets: country",
            "add_building_level": "adds one level of the specified Building<br>Supported Scopes: province",
            "add_civilization_value": "adds civilisation to a province<br>Supported Scopes: province",
            "add_claim": "gives the targetcountry a claim on the province.<br>Supported Scopes: province<br>Supported Targets: country",
            "add_permanent_province_modifier": "adds a permanent modifier from a Province<br>Supported Scopes: province",
            "add_province_modifier": "adds a modifier from a Province<br>Supported Scopes: province",
            "add_road_towards": "adds a road towards the target<br>Supported Scopes: province<br>Supported Targets: province",
            "add_state_loyalty": "adds state loyalty to a province<br>Supported Scopes: province",
            "add_vfx": "Adds VFX effects on the map<br>Supported Scopes: province",
            "begin_great_work_construction": "begins construction of a great work<br>Supported Scopes: province",
            "change_province_name": "changes the name of a province<br>Supported Scopes: province",
            "create_country": "Creates a new country with the current province scope as capital and then scopes to the new country<br>Supported Scopes: province<br>Supported Targets: country",
            "create_pop": "Creates a specific poptype in a province<br>Supported Scopes: province",
            "create_state_pop": "Creates a specific poptype with the countrys religion/culture in a province<br>Supported Scopes: province",
            "define_pop": "sets up a pop culture/religion/type possible to set.<br>Supported Scopes: province",
            "every_great_work_in_province": "Iterate through all great works in a province<br>every_great_work_in_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: province<br>Supported Targets: great_work",
            "every_neighbor_province": "Iterate through all neighbors of a province<br>every_neighbor_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: province<br>Supported Targets: province",
            "every_pops_in_province": "Iterate through all pops in a province<br>every_pops_in_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: province<br>Supported Targets: pop",
            "every_province_treasure": "Iterate through all province treasures<br>every_province_treasure = { limit = { [triggers] } [effects] }<br>Supported Scopes: province<br>Supported Targets: treasure",
            "every_unit_in_province": "Iterate through all units in a province<br>every_unit_in_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: province<br>Supported Targets: unit",
            "finish_great_work_construction": "finishes construction of a great work<br>Supported Scopes: province",
            "hide_model": "hides dynamic object on map<br>Supported Scopes: province",
            "ordered_great_work_in_province": "Iterate through all great works in a province<br>ordered_great_work_in_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: province<br>Supported Targets: great_work",
            "ordered_neighbor_province": "Iterate through all neighbors of a province<br>ordered_neighbor_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: province<br>Supported Targets: province",
            "ordered_pops_in_province": "Iterate through all pops in a province<br>ordered_pops_in_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: province<br>Supported Targets: pop",
            "ordered_province_treasure": "Iterate through all province treasures<br>ordered_province_treasure = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: province<br>Supported Targets: treasure",
            "ordered_unit_in_province": "Iterate through all units in a province<br>ordered_unit_in_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: province<br>Supported Targets: unit",
            "random_great_work_in_province": "Iterate through all great works in a province<br>random_great_work_in_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: province<br>Supported Targets: great_work",
            "random_neighbor_province": "Iterate through all neighbors of a province<br>random_neighbor_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: province<br>Supported Targets: province",
            "random_pops_in_province": "Iterate through all pops in a province<br>random_pops_in_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: province<br>Supported Targets: pop",
            "random_province_treasure": "Iterate through all province treasures<br>random_province_treasure = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: province<br>Supported Targets: treasure",
            "random_unit_in_province": "Iterate through all units in a province<br>random_unit_in_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: province<br>Supported Targets: unit",
            "remove_building_level": "removes one level of the specified Building<br>Supported Scopes: province",
            "remove_claim": "removes the targetcountry's claim on the province.<br>Supported Scopes: province<br>Supported Targets: country",
            "remove_province_deity": "removes a provincial deity<br>Supported Scopes: province",
            "remove_province_modifier": "Removes a modifier from a Province<br>Supported Scopes: province",
            "remove_vfx": "Removes VFX effects on the map<br>Supported Scopes: province",
            "set_as_governor": "sets the governor of a province to the specified character<br>Supported Scopes: province<br>Supported Targets: character",
            "set_city_status": "Sets the rank of a city<br>Supported Scopes: province",
            "set_conquered_by": "makes the currrent province owned and controlled by the target country<br>Supported Scopes: province<br>Supported Targets: country",
            "set_controller": "makes the currrent province controlled by the target country, if province owner and target are at war<br>Supported Scopes: province<br>Supported Targets: country",
            "set_owned_by": "makes the currrent province owned and controlled by the target country, without incurring any penalties<br>Supported Scopes: province<br>Supported Targets: country",
            "set_province_deity": "adds a provincial deity<br>Supported Scopes: province<br>Supported Targets: deity",
            "set_trade_goods": "Sets the trade goods in a province<br>Supported Scopes: province",
            "show_animated_text": "shows a custom text on the map<br>Supported Scopes: province",
            "show_model": "shows dynamic object on map<br>Supported Scopes: province",
            "add_country_culture_modifier": "adds a modifier to a country culture<br>Supported Scopes: country culture",
            "add_integration_progress": "Add integration progress to a country culture<br>Supported Scopes: country culture",
            "remove_country_culture_modifier": "Removes a modifier from a country culture<br>Supported Scopes: country culture",
            "set_country_culture_right": "Set civic rights to a country culture<br>Supported Scopes: country culture",
            "add_charisma": "Adds charisma skill<br>Supported Scopes: none",
            "add_finesse": "Adds finesse skill<br>Supported Scopes: none",
            "add_martial": "Adds martial skill<br>Supported Scopes: none",
            "add_to_global_variable_list": "Adds the event target to a variable list<br>add_to_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "add_to_list": "Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the (unbroken) event chain<br>add_to_list = <string> NOTE, if adding a permanent target to a temporary list, the whole list becomes permanent<br>Supported Scopes: none",
            "add_to_local_variable_list": "Adds the event target to a variable list<br>add_to_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "add_to_temporary_list": "Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the same effect<br>add_to_temporary_list = <string> NOTE, if adding a temporary target to a permanent list, the list will stay permanent<br>Supported Scopes: none",
            "add_to_variable_list": "Adds the event target to a variable list<br>add_to_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "add_zeal": "Adds zeal skill<br>Supported Scopes: none",
            "assert_if": "Conditionally cause an assert during run time<br>assert_if = { limit = { X } text = Y }, where X is a trigger and Y is an optional string<br>Supported Scopes: none",
            "assert_read": "Conditionally cause an assert during read time<br>assert_read = X, where X is yes or the string to be printed in the assert<br>Supported Scopes: none",
            "break": "break execution of effects, break = yes/no/boolean event target<br>Supported Scopes: none",
            "break_alliance": "country in scope breaks any applicable alliance with the target<br>Supported Scopes: none<br>Supported Targets: country",
            "break_if": "conditionally break execution of effects, break_if = { X }, where X is a trigger<br>Supported Scopes: none",
            "change_global_variable": "Changes the value or a numeric variable<br>change_variable = { name = X operation = Y }<br>Where X is the name of the numeric variable to modify<br>Where the valid operations are add, subtract, multiply, divide and modulo<br>Where Y is a fixed point value, script value or event target of a value type<br>Supported Scopes: none",
            "change_local_variable": "Changes the value or a numeric variable<br>change_variable = { name = X operation = Y }<br>Where X is the name of the numeric variable to modify<br>Where the valid operations are add, subtract, multiply, divide and modulo<br>Where Y is a fixed point value, script value or event target of a value type<br>Supported Scopes: none",
            "change_variable": "Changes the value or a numeric variable<br>change_variable = { name = X operation = Y }<br>Where X is the name of the numeric variable to modify<br>Where the valid operations are add, subtract, multiply, divide and modulo<br>Where Y is a fixed point value, script value or event target of a value type<br>Supported Scopes: none",
            "clamp_global_variable": "Clamps a variable the specified max and min<br>clamp_variable = { name = X max = Y min = Z }<br>Where X is the name of the variable<br>Where Y and Z are script values<br>Supported Scopes: none",
            "clamp_local_variable": "Clamps a variable the specified max and min<br>clamp_variable = { name = X max = Y min = Z }<br>Where X is the name of the variable<br>Where Y and Z are script values<br>Supported Scopes: none",
            "clamp_variable": "Clamps a variable the specified max and min<br>clamp_variable = { name = X max = Y min = Z }<br>Where X is the name of the variable<br>Where Y and Z are script values<br>Supported Scopes: none",
            "clear_global_variable_list": "Empties the list<br>clear_variable_list = variable_name<br>Supported Scopes: none",
            "clear_local_variable_list": "Empties the list<br>clear_variable_list = variable_name<br>Supported Scopes: none",
            "clear_saved_scope": "Clears a saved scope from the top scope<br>save_scope_as = cool_scope -> clear_saved_scope = cool_scope<br>Supported Scopes: none",
            "clear_variable_list": "Empties the list<br>clear_variable_list = variable_name<br>Supported Scopes: none",
            "custom_label": "just a tooltip, the scope as object (for grouping, localization)<br>Supported Scopes: none",
            "custom_tooltip": "just a tooltip, the scope as subject (for grouping, localization)<br>Supported Scopes: none",
            "debug_log": "Log a string to the debug log when this effect executes, debug_log = message, the message can be a localization string with ROOT, SCOPE and PREV available<br>Supported Scopes: none",
            "debug_log_scopes": "Log the current scope to the game log when this effect executes yes = full scope info, no=only current scope<br>Supported Scopes: none",
            "else": "Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met<br>if = { limit = { [triggers] } [effects] }<br>else = { [effects] }<br>Supported Scopes: none",
            "else_if": "Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met<br>if = { limit = { [triggers] } [effects] }<br>else_if = { limit = { [triggers] } [effects] }<br>Supported Scopes: none",
            "every_active_war": "Iterate through all currently active wars<br>every_active_war = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "every_area": "Iterate through all existing areas<br>every_area = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: area",
            "every_country": "Iterate through all existing countries<br>every_country = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: country",
            "every_deity": "Iterate through all existing deities<br>every_deity = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: deity",
            "every_ended_war": "Iterate through all previous wars<br>every_ended_war = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "every_holy_site": "All holy sites in a country<br>every_holy_site = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "every_in_global_list": "Iterate through all items in global list. list = name or variable = name<br>every_in_global_list = { limit = { [triggers] } [effects] }<br>Supported Scopes: none",
            "every_in_list": "Iterate through all items in list. list = name or variable = name<br>every_in_list = { limit = { [triggers] } [effects] }<br>Supported Scopes: none",
            "every_in_local_list": "Iterate through all items in local list. list = name or variable = name<br>every_in_local_list = { limit = { [triggers] } [effects] }<br>Supported Scopes: none",
            "every_living_character": "Executes on every living character<br>Supported Scopes: none",
            "every_ownable_province": "Iterate through all ownable provinces in the world<br>every_ownable_province = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "every_province": "Executes on every province<br>Supported Scopes: none",
            "every_region": "Iterate through all existing regions<br>every_region = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: region",
            "every_sea_and_river_zone": "Iterate through all sea and river zones in the world<br>every_sea_and_river_zone = { limit = { [triggers] } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "hidden_effect": "Effect not shown in tooltips<br>Supported Scopes: none",
            "if": "Executes enclosed effects if limit criteria are met<br>if = { limit = { [triggers] } [effects] }<br>Supported Scopes: none",
            "make_pregnant": "makes a character pregnant<br>Supported Scopes: none",
            "ordered_active_war": "Iterate through all currently active wars<br>ordered_active_war = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "ordered_area": "Iterate through all existing areas<br>ordered_area = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: area",
            "ordered_country": "Iterate through all existing countries<br>ordered_country = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: country",
            "ordered_deity": "Iterate through all existing deities<br>ordered_deity = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: deity",
            "ordered_ended_war": "Iterate through all previous wars<br>ordered_ended_war = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "ordered_holy_site": "All holy sites in a country<br>ordered_holy_site = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "ordered_in_global_list": "Iterate through all items in global list. list = name or variable = name<br>ordered_in_global_list = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none",
            "ordered_in_list": "Iterate through all items in list. list = name or variable = name<br>ordered_in_list = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none",
            "ordered_in_local_list": "Iterate through all items in local list. list = name or variable = name<br>ordered_in_local_list = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none",
            "ordered_ownable_province": "Iterate through all ownable provinces in the world<br>ordered_ownable_province = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "ordered_region": "Iterate through all existing regions<br>ordered_region = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: region",
            "ordered_sea_and_river_zone": "Iterate through all sea and river zones in the world<br>ordered_sea_and_river_zone = {<br>limit = { [triggers] }<br>order_by = script_value<br>position = int<br>min = int<br>max = script_value<br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max<br>[effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "random": "a random effect, random = { chance = X modifier = Y effects... }<br>where X is a chance of the enclosed effects being fired and can be modified by optional value modifier list (AKA MTTH) Y<br>Supported Scopes: none",
            "random_active_war": "Iterate through all currently active wars<br>random_active_war = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "random_area": "Iterate through all existing areas<br>random_area = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: area",
            "random_country": "Iterate through all existing countries<br>random_country = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: country",
            "random_deity": "Iterate through all existing deities<br>random_deity = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: deity",
            "random_ended_war": "Iterate through all previous wars<br>random_ended_war = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: war",
            "random_holy_site": "All holy sites in a country<br>random_holy_site = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "random_in_global_list": "Iterate through all items in global list. list = name or variable = name<br>random_in_global_list = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none",
            "random_in_list": "Iterate through all items in list. list = name or variable = name<br>random_in_list = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none",
            "random_in_local_list": "Iterate through all items in local list. list = name or variable = name<br>random_in_local_list = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none",
            "random_list": "a random list effect<br>random_list = { X1 = { trigger = { enables/disable this effect} modifier/compare_modifier/opinion_modifier = Y1 effect1 } X2 = { trigger = { enables/disable this effect} modifier/compare_modifier/opinion_modifier = Y2 effect2 } ... }<br>Selects one effect from the list and fires it. The effects are weighted by numbers X1, X2... (the higher the number, the higher the chance of the effect being picked).<br>The chances can be modified by optional value modifier lists Y1, Y2... (AKA MTTH)<br>Supported Scopes: none",
            "random_living_character": "Executes on a random living character<br>Supported Scopes: none",
            "random_ownable_province": "Iterate through all ownable provinces in the world<br>random_ownable_province = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "random_province": "Executes on a random province<br>Supported Scopes: none",
            "random_region": "Iterate through all existing regions<br>random_region = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: region",
            "random_sea_and_river_zone": "Iterate through all sea and river zones in the world<br>random_sea_and_river_zone = { limit = { [triggers] } (optional) weight = { mtth } [effects] }<br>Supported Scopes: none<br>Supported Targets: province",
            "remove_from_list": "Removes the current scope from a named list remove_from_list = <string><br>Supported Scopes: none",
            "remove_global_variable": "Removes a variable<br>remove_variable = variable_name<br>Supported Scopes: none",
            "remove_list_global_variable": "Removes the target from a variable list<br>remove_list_variable = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "remove_list_local_variable": "Removes the target from a variable list<br>remove_list_variable = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "remove_list_variable": "Removes the target from a variable list<br>remove_list_variable = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "remove_local_variable": "Removes a variable<br>remove_variable = variable_name<br>Supported Scopes: none",
            "remove_variable": "Removes a variable<br>remove_variable = variable_name<br>Supported Scopes: none",
            "reset_scoring": "Moves a family to another country<br>Supported Scopes: none<br>Supported Targets: country",
            "round_global_variable": "Rounds a variable to the nearest specified value<br>clamp_variable = { name = X nearest = Y }<br>Where X is the name of the variable<br>Where Y is a script value<br>Supported Scopes: none",
            "round_local_variable": "Rounds a variable to the nearest specified value<br>clamp_variable = { name = X nearest = Y }<br>Where X is the name of the variable<br>Where Y is a script value<br>Supported Scopes: none",
            "round_variable": "Rounds a variable to the nearest specified value<br>clamp_variable = { name = X nearest = Y }<br>Where X is the name of the variable<br>Where Y is a script value<br>Supported Scopes: none",
            "save_scope_as": "Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain<br>save_event_target_as = <string><br>Supported Scopes: none",
            "save_temporary_scope_as": "Saves the current scope as an arbitrarily-named temporary target to be referenced later in the same effect<br>save_temporary_event_target_as = <string><br>Supported Scopes: none",
            "set_global_variable": "Sets a variable<br>set_variable = { name = X value = Y days = Z }<br>Where X is the name of the variable used to then access it<br>Where Y is any event target, bool, value, script value or flag (flag:W)<br>An optional days where Z is the number of days or script value<br>This variable will be accessible with var:X. With type being in a scope object or in a top scope<br>Supported Scopes: none",
            "set_local_variable": "Sets a variable<br>set_variable = { name = X value = Y days = Z }<br>Where X is the name of the variable used to then access it<br>Where Y is any event target, bool, value, script value or flag (flag:W)<br>An optional days where Z is the number of days or script value<br>This variable will be accessible with var:X. With type being in a scope object or in a top scope<br>Supported Scopes: none",
            "set_variable": "Sets a variable<br>set_variable = { name = X value = Y days = Z }<br>Where X is the name of the variable used to then access it<br>Where Y is any event target, bool, value, script value or flag (flag:W)<br>An optional days where Z is the number of days or script value<br>This variable will be accessible with var:X. With type being in a scope object or in a top scope<br>Supported Scopes: none",
            "show_as_tooltip": "Effect only shown in tooltips (but not executed)<br>Supported Scopes: none",
            "switch": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.<br>switch = {<br>	trigger = simple_assign_trigger<br>	case_1 = { [effects] }<br>	case_2 = { [effects] }<br>	case_n = { [effects] }<br>	fallback = { [effects] }<br>Supported Scopes: none",
            "trigger_event": 'triggers an event or on_action<br>trigger_event = { id = X days/months/years = Y } (for events)<br>or<br>trigger_event = { on_action = X days/months/years = Y } (for on_actions)<br>Days/months/years are optional and equal to 0 if not specified. If specified, Y can be a value or an inclusive interval "{ A B }" from which the duration will be picked randomly.<br>Supported Scopes: none',
            "while": "Repeats enclosed effects while limit criteria are met or until set iteration count is reached<br>while = { limit = { [triggers] } [effects] }<br> while = { count = 3 [effects] }<br>Default max of 1000.<br>Supported Scopes: none",
        }
        self.TriggersList = {
            "debug_log=yes": "Outputs to the game log when this trigger is hit<br>debug_log_details = yes - Outputs full trigger content when this trigger is hit",
            "any_area_including_unownable_province": "Iterate through all provinces in an area<br>any_area_including_unownable_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: area<br>Supported Targets: province",
            "any_area_province": "Iterate through all ownable provinces in an area<br>any_area_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: area<br>Supported Targets: province",
            "any_area_state": "Iterate through all states in an area<br>any_area_state = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: area<br>Supported Targets: state",
            "any_neighbor_area": "Iterate through all neighbouring areas of a Area<br>any_neighbor_area = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: area<br>Supported Targets: area",
            "any_state_province": "Iterate through all provinces in a state<br>any_state_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: state<br>Supported Targets: province",
            "can_change_governor_policy": "Checks if a state can change to a specific governor_policy<br>Supported Scopes: state",
            "can_import_trade_good": "Checks if a state can import a certain trade good.<br>Supported Scopes: state",
            "has_any_great_work_state": "does the state contain a province with a great work?<br>Traits: yes/no <br>Supported Scopes: state",
            "has_governor": "Checks if a state has a governor<br>Traits: yes/no <br>Supported Scopes: state",
            "has_state_food": "does the state have the required food?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "has_state_food_capacity": "does the state have the required food capacity?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "has_state_modifier": "check if a State has a specific modifier<br>Supported Scopes: state",
            "incoming_trade_routes": "The number of incoming trade routes in this state<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "is_capital_state": "is the state a capital or not?<br>Traits: yes/no <br>Supported Scopes: state",
            "outgoing_trade_routes": "The number of outgoing trade routes in this state<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "state_commerce_income": "does the state have the required commerce income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "state_level_loyalty": "does the state have the required loyalty (from state level)?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "state_monthly_food_income": "does the state have the monthly food income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "trade_good_exports": "is the state's trade good exports greater or equal than the value? trade_good_exports = { target = X [*value &lt;, &le;, =, !=, &gt Y* or *value = { min max }*  }<br>Supported Scopes: state",
            "trade_good_imports": "is the state's trade good imports greater or equal than the value? trade_good_imports = { target = X [*value &lt;, &le;, =, !=, &gt Y* or *value = { min max }*  }<br>Supported Scopes: state",
            "trade_good_surplus": "is the state's trade good surplus greater or equal than the value? trade_good_surplus = { target = X [*value &lt;, &le;, =, !=, &gt Y* or *value = { min max }*  }<br>Supported Scopes: state",
            "trade_routes": "The total number of trade routes in this state<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "unused_trade_routes": "The total number of unused trade routes in this state<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: state",
            "any_sub_unit": "Iterate through all subunits in a unit<br>any_sub_unit = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: unit<br>Supported Targets: subunit",
            "days_since_last_unit_victory": "Check number of days since last victory<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "experience_percentage": "How many percent experience does this unit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "food_percentage": "How many percent of food does this unit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "has_commander": "unit has a commander<br>Traits: yes/no <br>Supported Scopes: unit",
            "has_reduced_roadbuilding_cost": "unit has reduced road building cost<br>Traits: yes/no <br>Supported Scopes: unit",
            "has_siege_impact": "unit has reduced road building cost<br>Traits: yes/no <br>Supported Scopes: unit",
            "has_unit_modifier": "check if a Unit has a specific modifier<br>Supported Scopes: unit",
            "in_combat": "unit is in combat<br>Traits: yes/no <br>Supported Scopes: unit",
            "in_siege": "unit is in Siege<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_army": "unit is Army<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_carrying_troops": "unit is carrying troops<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_dominant_unit": "check if a Unit has a specific modifier<br>Supported Scopes: unit",
            "is_exiled": "unit is Exiled<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_idle": "unit is idle (AI state)<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_movement_locked": "unit is movement locked<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_moving": "unit is moving<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_navy": "unit is Navy<br>Traits: yes/no <br>Supported Scopes: unit",
            "is_unit_ability_used": "check what ability unit uses<br>Supported Scopes: unit",
            "is_unit_locked": "Check if a Unit is locked<br>Traits: yes/no <br>Supported Scopes: unit",
            "morale_percentage": "How many percent morale does this unit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "num_of_loyal_cohorts": "Check number of cohorts with personal loyalty in a Uni<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "num_of_migrants": "Check number of migrant cohorts in a unit<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "strength_percentage": "How many percent strength does this unit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "unit_size": "How many sub units does this unit have?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "unit_size_rank": "The rank w.r.t. to number of subunits compared to other units of country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "unit_size_rank_percentage": "The rank w.r.t. to number of subunits compared to other units of country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "unit_threat": "How many threat does this unit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: unit",
            "great_work_any_material": "Checks if a great work includes a specific material<br>Supported Scopes: great_work",
            "great_work_builder": "Did the specified country build this GW?<br>Traits: country tag/country scope<br>Supported Scopes: great_work<br>Supported Targets: country",
            "great_work_category": "Checks if a great work has a specific category<br>Supported Scopes: great_work",
            "great_work_min_effect_tier": "compare a value to the great work's lowest effect tier level<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: great_work",
            "great_work_only_material": "Checks if a great work is made of one specific material<br>Supported Scopes: great_work",
            "is_ancient_wonder": "is this great work an ancient wonder?<br>Traits: yes/no <br>Supported Scopes: great_work",
            "age": "is the character old/young enough?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "any_character_treasure": "Iterate through all character heirlooms<br>any_character_treasure = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: treasure",
            "any_character_unit": "units commanded by a character<br>any_character_unit = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: unit",
            "any_child": "Iterate through all children<br>any_child = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: character",
            "any_friend": "Iterate through all friends<br>any_friend = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: character",
            "any_governor_state": "Iterate through all states a governor is governor of<br>any_governor_state = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: state",
            "any_holdings": "Iterate through all holdings of a character<br>any_holdings = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: province",
            "any_parent": "Checks if any parent meets the specified criteria<br>any_parent = { triggers }<br>Supported Scopes: character",
            "any_rival": "Iterate through all Rivals<br>any_rival = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: character",
            "any_sibling": "Iterate through all siblings<br>any_sibling = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: character",
            "any_support_as_heir": "Iterate through all supportasHeir<br>any_support_as_heir = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: character<br>Supported Targets: character",
            "boni_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "can_add_entire_loyalty_bonus": "Checks if value for loyalty type can be added without passing the types limit for the given scripted modifier.<br>Traits: class CLoyaltyTypeDatabase key<br>Supported Scopes: character",
            "can_get_friends": "Can the scope character get Friends?<br>Traits: yes/no <br>Supported Scopes: character",
            "can_get_rivals": "Can the scope character get rivals?<br>Traits: yes/no <br>Supported Scopes: character",
            "can_hold_office": "Can the character have this Office?<br>Supported Scopes: character",
            "character_experience": "does the character have the required Experience?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "charisma": "does the character have the required charisma skill level?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "corruption": "does the character have the required Corruption?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "current_party_conviction": "does the character have the required conviction for its party?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "days_since_last_victory": "checks the days since last victory on the battlefield.<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "democratic_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "fertility": "does the character have the required fertility?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "finesse": "does the character have the required finesse skill level?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "from_ruler_family": "Is the scope character same family as ruler ?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_ambition": "Does the character have this Ambition?<br>Supported Scopes: character",
            "has_any_office": "does the characer have an office or not?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_character_modifier": "does the character have a specific modifier<br>Supported Scopes: character",
            "has_culture": "Does the character have this culture?<br>Traits: culture db key/culture scope<br>Supported Scopes: character<br>Supported Targets: culture",
            "has_culture_group": "Does the character have this culture group?<br>Supported Scopes: character",
            "has_father": "does the character have a valid living father?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_holding_in": "doess the character have a holding in the target province?<br>Traits: province id/province scope<br>Supported Scopes: character<br>Supported Targets: province",
            "has_job": "does the character have a valid Job?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_loyalty": "Checks where a character has a certain loyalty modifier. has_loyalty = X<br>X is a scripted modifier name.<br>Traits: class CLoyaltyTypeDatabase key<br>Supported Scopes: character",
            "has_mother": "does the character have a valid living mother?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_nickname": "Does the scope character have a nickname?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_office": "Does the character have this Office?<br>Supported Scopes: character",
            "has_religion": "Does the character have this religion?<br>Traits: class CReligionDatabase key/religion scope<br>Supported Scopes: character<br>Supported Targets: religion",
            "has_same_culture_as": "Does the character have the same culture as the target?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "has_same_culture_group_as": "Does the character have the same culture group as the target?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "has_same_family": "Does the character belong to the same family as the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "has_same_religion_as": "Does the character have the same religion as the target?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "has_tech_office": "Is the scope character in a tech office?<br>Traits: yes/no <br>Supported Scopes: character",
            "has_tech_office_of": "Does the character have this trait?<br>Supported Scopes: character",
            "has_trait": "Does the character have this trait?<br>Supported Scopes: character",
            "has_triggered_character_modifier": "does the character have a specific triggered modifier<br>Supported Scopes: character",
            "health": "does the character have the required Health?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "highest_skill": "Is the skill the highest skill of the character? True even when there are multiple skills with the same highest value.<br>Supported Scopes: character",
            "in_command": "Is the scope character a InCommand?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_admiral": "Is the scope character a Admiral?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_adult": "Is the scope character adult?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_alive": "is the character alive or dead?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_at_location": "Is the character currently in the target province?<br>Traits: province id/province scope<br>Supported Scopes: character<br>Supported Targets: province",
            "is_at_same_location": "Is the character currently in the same province as the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_banished": "is the character banished <br>Traits: yes/no <br>Supported Scopes: character",
            "is_bastard": "Is the scope character a bastard?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_child_of": "Is the character a child of the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_clan_chief": "Is the scope character a ClanChief?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_close_relative": "Is the character a close relative (Child, Parent, Sibling/Half-sibling, Nephew/Niece, Aunt/Uncle, Grandparent or Grandchild) of the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_co_ruler": "Is the scope character a co-ruler?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_courtier": "Is the scope character  Courtier (without title / job)?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_deified": "Checks if a character has been deified<br>Traits: yes/no <br>Supported Scopes: character",
            "is_female": "Is the scope character female?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_friend": "Is the target character alive?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_general": "Is the scope character a General?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_governor": "Is the scope character a Governor?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_head_of_family": "Is the scope character a head of a family?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_leader_of_party": "does the character lead the specific party?<br>Traits: party scope<br>Supported Scopes: character<br>Supported Targets: party",
            "is_leader_of_party_type": "does the character lead the specific party type?<br>Traits: class CPartyTypeDataBase key<br>Supported Scopes: character",
            "is_male": "Is the scope character male?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_married": "Is the scope character married?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_mercenary": "Is the scope character Mercenary?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_minor_character": "Does the scope belong to a minor family or not<br>Traits: yes/no <br>Supported Scopes: character",
            "is_parent_of": "Is the character a parent of the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_party_leader": "Is the scope character a PartyLeader?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_pregnant": "is the character pregnant?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_pretender": "is the character Pretender or dead?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_previous_ruler": "Is the scope character a previous ruler?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_primary_heir": "Is the scope character a PrimaryHeir?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_rival": "Is the target character alive?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_ruler": "Is the scope character a ruler?<br>Traits: yes/no <br>Supported Scopes: character",
            "is_same_gender": "Is the character same gender as the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_same_party_as": "Is the character same Party as the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_sibling_of": "Is the character a sibling of the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_spouse_of": "Is the character a spouse of the target character?<br>Traits: character scope<br>Supported Scopes: character<br>Supported Targets: character",
            "is_successor": "is the character a successor?<br>Traits: yes/no <br>Supported Scopes: character",
            "loyalty": "does the character have the required Loyalty?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "martial": "does the character have the required martial skill level?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_character_treasures": "does the character have a required amount of treasures?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_holdings_owned": "how many holdings does the character have?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_loyal_cohorts": "does the character have the required number of loyal cohorts?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_loyal_veterans": "does the character have the required number of loyal Veterans?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_of_children": "number of children of character?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_of_friends": "number of Friends of character?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_of_rivals": "number of Rivals of character?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "num_of_supporters": "checks amount of supporters as heir.<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "number_of_health_traits": "does the character have required amount of personality traits?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "number_of_military_traits": "does the character have required amount of military traits?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "number_of_personality_traits": "does the character have required amount of personality traits?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "number_of_status_traits": "does the character have required amount of personality traits?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "number_of_traits": "does the character have this many traits?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "oligarchic_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "optimates_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "party": "Does the character belong to this party?<br>Traits: party scope<br>Supported Scopes: character<br>Supported Targets: party",
            "party_type": "Does the character belong to this party?<br>Traits: class CPartyTypeDataBase key<br>Supported Scopes: character",
            "populares_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "popularity": "does the character have the required popularity?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "power_base": "does the character have the required powerbase?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "prisoner": "is the character imprisoned?<br>Traits: yes/no <br>Supported Scopes: character",
            "prominence": "does the character have the required Prominence?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "relative_power_base": "Does the character have the required percentage of the total powerbase?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "title_importance": "checks the title importance a character has.<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "traditionalist_party_conviction": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "wealth": "does the character have the required gold?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "zeal": "does the character have the required zeal skill level?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: character",
            "pop_can_move": "Can this pop be moved without breaking pop movement rules?<br>Traits: yes/no <br>Supported Scopes: pop",
            "pop_culture": "Is the pop this culture?<br>Traits: culture db key/culture scope<br>Supported Scopes: pop<br>Supported Targets: culture",
            "pop_culture_group": "Is the pop this culture group?<br>Supported Scopes: pop",
            "pop_hapiness": "Checks hapiness for this pop<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: pop",
            "pop_religion": "Is the pop this Religion?<br>Traits: class CReligionDatabase key/religion scope<br>Supported Scopes: pop<br>Supported Targets: religion",
            "pop_type": "Is the pop this PopType?<br>Supported Scopes: pop",
            "any_governorship_state": "Iterate through all states in a governorship<br>any_governorship_state = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: governorship<br>Supported Targets: state",
            "treasure_count": "does the country/province/character have a required amount of treasures?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country, character, province",
            "alliance_with": "if a country is allied with a another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "any_allied_country": "Iterate through all allied countries<br>any_allied_country = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country",
            "any_army": "Iterate through all armies in a country<br>any_army = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "any_available_deity": "Iterate through all deity that a country can change to<br>any_available_deity = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "any_character": "Iterate through all (major + minor) characters in a country<br>any_character = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: character",
            "any_commander": "Iterate through all commanders in a country<br>any_commander = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: character",
            "any_countries_at_war_with": "Iterate through all countries at war with<br>any_countries_at_war_with = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country",
            "any_country_culture": "Iterate through all country cultures in the country<br>any_country_culture = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "any_country_state": "Iterate through all states in a country<br>any_country_state = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: state",
            "any_country_sub_unit": "Iterate through all subunits in all units in a country<br>any_country_sub_unit = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: subunit",
            "any_country_treasure": "Iterate through all treasures in a country<br>any_country_treasure = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: treasure",
            "any_current_war": "Iterate through all current country wars<br>any_current_war = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: war",
            "any_family": "Iterate through all families in a country<br>any_family = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: family",
            "any_governorships": "Iterate through all governorships of a country<br>any_governorships = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: governorship",
            "any_integrated_culture": "Iterate through all integrated country cultures<br>any_integrated_culture = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country culture",
            "any_legion": "legion in country<br>any_legion = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: legion",
            "any_navy": "Iterate through all navies in a country<br>any_navy = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "any_neighbour_country": "Iterate through all neighbour countries<br>any_neighbour_country = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country",
            "any_owned_holy_site": "All holy sites in a country<br>any_owned_holy_site = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: province",
            "any_owned_province": "Iterate through all owned provinces in a country<br>any_owned_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: province",
            "any_pantheon_deity": "Iterate through all (valid) pantheon deities<br>any_pantheon_deity = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: deity",
            "any_party": "Iterate through all existing parties in a country<br>any_party = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: party",
            "any_subject": "Iterate through all subject countries<br>any_subject = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: country",
            "any_successor": "Iterate through all successors in a country<br>any_successor = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: character",
            "any_unit": "Iterate through all units in a country<br>any_unit = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: country<br>Supported Targets: unit",
            "biggest_party": "is this party the biggest<br>Supported Scopes: country<br>Supported Targets: party",
            "boni_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "can_activate": "Can omen be activated for this deity?<br>Traits: deity scope<br>Supported Scopes: country<br>Supported Targets: deity",
            "can_change_idea": "Can a country change to this idea?<br>Supported Scopes: country",
            "can_pay_price": "if a country can pay price X<br>Supported Scopes: country",
            "centralization": "does the country have the required centralization?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "civic_tech": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "civil_war_with": "if a country in civil war with a another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "country_culture_group": "Is the country this culture group?<br>Supported Scopes: country",
            "country_population": "The total population of a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "country_trade_good_exports": "is the country's trade good exports greater or equal than the value? country_trade_good_exports = { target = X [*value &gt;/&lt;&ge;/&le; Y* or *value = { min max }*  }<br>Supported Scopes: country",
            "country_trade_good_imports": "is the country's trade good imports greater or equal than the value? country_trade_good_imports = { target = X [*value &gt;/&lt;&ge;/&le; Y* or *value = { min max }*  }<br>Supported Scopes: country",
            "cultural_unity": "for AI: cultural unity<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "days_since_last_war": "Check number of days since last war<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "democratic_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "diplomatic_stance": "Does this country have this diplomatic stance?<br>Traits: class CDiplomaticStanceDatabase key<br>Supported Scopes: country",
            "distress_level": "AI distress level (discrete)<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "exports_to": "if a country exports to another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "gender_equality": "country has gender equality or not ?<br>Traits: yes/no <br>Supported Scopes: country",
            "government": "which government a country has<br>Supported Scopes: country",
            "has_aggressive_expansion": "The amount of aggressive expansion of a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "has_any_great_work_country": "if a country has a great work in any province<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "has_any_omen": "does the country have an active omen or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "has_civil_war": "countryis in civil war ?<br>Traits: yes/no <br>Supported Scopes: country",
            "has_co_ruler_government": "Does the current government have co-rulers?<br>Traits: yes/no <br>Supported Scopes: country",
            "has_coasts": "If the country has any coastal cities<br>Traits: yes/no <br>Supported Scopes: country",
            "has_completed_mission": "Has this country completed the specified mission?<br>Traits: class CMissionDefinitionDatabase key<br>Supported Scopes: country",
            "has_completed_mission_task": "Has this country completed the specified mission task?<br>Traits: class CMissionTaskDefinitionDatabase key<br>Supported Scopes: country",
            "has_country_great_work_effect": "check if a country has a specific effect from a great work<br>Supported Scopes: country",
            "has_country_modifier": "check if a country has a specific modifier<br>Supported Scopes: country",
            "has_deity_in_pantheon": "Does this country have this deity in it's pantheon?<br>Supported Scopes: country<br>Supported Targets: deity",
            "has_high_economic_policy": "does a country have the high economic policy for x?<br>Supported Scopes: country",
            "has_land": "Does the scoped country own any provinces<br>Traits: yes/no <br>Supported Scopes: country",
            "has_law": "which HasLaw a country has<br>Supported Scopes: country",
            "has_low_economic_policy": "does a country have the low economic policy for x?<br>Supported Scopes: country",
            "has_mid_economic_policy": "does a country have the mid economic policy for x?<br>Supported Scopes: country",
            "has_military_access": "Does this country have military access through the other country?<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "has_military_bonus": "if a country has a military bonus<br>Supported Scopes: country",
            "has_monthly_balance": "does the country have the required Monthly Balance?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "has_monthly_income": "does the country have the required Monthly Income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "has_opinion": "does the country have an opinion type towards another country?<br>Supported Scopes: country<br>Supported Targets: party",
            "has_party_type": "does the country have this party?<br>Traits: class CPartyTypeDataBase key<br>Supported Scopes: country",
            "has_primary_heir": "does the country have a primary heir or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "has_senate_approval": "The country's senate approval<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "has_subject_loyalty": "does the country have the required Subject Loyalty?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "has_this_omen": "Does this country have this active omen?<br>Traits: deity scope<br>Supported Scopes: country<br>Supported Targets: deity",
            "has_truce_with": "if a country is at truce a another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "has_war_exhaustion": "does the country have the required War Exhaustion?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "healthy_economy_percentage": "AI regression test: % of countries at peace with healthy economy<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "heritage": "Does this country have this heritage?<br>Traits: class CHeritageDatabase key<br>Supported Scopes: country",
            "idea": "which Idea a country has<br>Supported Scopes: country",
            "imports_from": "if a country imports from another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "in_diplomatic_range": "if a country is in diplomatic range with another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "invention": "if a country has an invention<br>Supported Scopes: country",
            "is_ai": "is the country an ai or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_antagonist": "is the country an antagonist or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_guaranteed_by": "Is this country guaranteed by the other country?<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "is_monarchy": "is the country at monarchy or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_monotheist_deity": "Is this deity monotheistic?<br>Traits: deity scope<br>Supported Scopes: country<br>Supported Targets: deity",
            "is_overlord": "Is the country an overlord to any other country?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_republic": "is the country at republic or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_subject": "Is the country a subject to any other country?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_subject_of": "Is the country a subject to the specified country?<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "is_subject_type": "Is the country a subject of the specified type?<br>Traits: class CSubjectTypeDatabase key<br>Supported Scopes: country",
            "is_tradition_tree_allowed": "if a country is allowed tradition tree<br>Supported Scopes: country",
            "is_tribal": "is the country at tribal or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "is_tutorial_active": "is the tutorial active?<br>Traits: yes/no <br>Supported Scopes: country",
            "legitimacy": "does the country have the required Legitimacy?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "manpower": "does the country have the required Manpower?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "manpower_percentage": "does the country have the required manpower percentage?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "max_diplomatic_relations": "The number of max diplomatic relations for a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "max_manpower": "does the country have the required Max Manpower?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "migration_strategy": "discrete AI migration strategies (discrete)<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "military_experience": "The amount of military experience of a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "military_tech": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "months_to_war": "number of months to planned war, or 0 if already at war<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "naval_dominance": "does AI dominate the almost seven seas? (discrete)<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "non_loyal_power_base": "The non loyal power base of the country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_active_relations": "The number of active relations for a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_allowed_families": "The number of allowed families in a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_cities": "does the country have the required NumOfCities?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_civic_ideas": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_cohorts": "does the country have the required amount of cohorts?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_controlled_cities": "does the country have the required number of cities controlled?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_deified_rulers_in_pantheon": "does the country have the required number of deified rulers in it's pantheon?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_families": "does the country have this many families?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_military_ideas": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_oratory_ideas": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_ports": "does the country have the required NumOfPorts?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_provinces": "does the country have the required number of provinces?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_religious_ideas": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_ships": "does the country have the required amount of ships?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "num_of_unit_type": "Does the country have this amount of (type = <type> value = <val>)?<br>Supported Scopes: country",
            "office_is_empty": "Is this office empty for the country?<br>Supported Scopes: country",
            "oligarchic_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "opinion": "is the country's opinion of the target greater or equal than the value? opinion = { target = X [*value &gt;/&lt;&ge;/&le; Y* or *value = { min max }*  }<br>Supported Scopes: country",
            "optimates_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "oratory_tech": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "owns": "does a country own a specific province<br>Traits: province id/province scope<br>Supported Scopes: country<br>Supported Targets: province",
            "owns_area": "does a country own a specific area<br>Traits: area id/area tag/area scope<br>Supported Scopes: country<br>Supported Targets: area",
            "owns_or_subject_owns": "Is the target province owned by this country or one of its subjects?<br>Traits: province id/province scope<br>Supported Scopes: country<br>Supported Targets: province",
            "owns_or_subject_owns_area": "does a country own a specific area<br>Traits: area id/area tag/area scope<br>Supported Scopes: country<br>Supported Targets: area",
            "owns_or_subject_owns_region": "does a country own a specific region<br>Traits: region id/region tag/area scope<br>Supported Scopes: country<br>Supported Targets: area",
            "owns_region": "does a country own a specific region<br>Traits: region id/region tag/area scope<br>Supported Scopes: country<br>Supported Targets: area",
            "percentage_characters_below_max_loyalty": "percentage of characters below max loyalty<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "political_influence": "The amount of political influence of a country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "populares_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "possible_holdings": "does the country have the required number of possible holdings?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "primary_culture": "Is the country this culture?<br>Traits: culture db key/culture scope<br>Supported Scopes: country<br>Supported Targets: culture",
            "rank": "gets country rank as integer, prefer using script values when comparing e.g. major_power etc.<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "religion": "Does the country have this religion?<br>Traits: class CReligionDatabase key/religion scope<br>Supported Scopes: country<br>Supported Targets: religion",
            "religious_tech": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "religious_unity": "The religous unity of the country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "safety": "AI safety level in percent<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "stability": "does the country have the required Stability?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "tag": "if a country is a specific tag<br>Supported Scopes: country",
            "threat_in_owned_land": "size of enemy forces (1 = 1000 men) in country's lands<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "total_holdings": "does the country have the required number of holdings?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "total_power_base": "The total power base of the country<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "towards_civil_war": "country is on the way towards civil war ?<br>Traits: yes/no <br>Supported Scopes: country",
            "traditionalist_party_support": "Checks<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "treasury": "does the country have the required Treasury?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "tyranny": "does the country have the required Tyranny?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country",
            "war": "is the country at war or not?<br>Traits: yes/no <br>Supported Scopes: country",
            "war_with": "if a country is a war with another country<br>Traits: country tag/country scope<br>Supported Scopes: country<br>Supported Targets: country",
            "cohort_food_consumption": "How much food does this subunit consume?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: subunit",
            "cohort_food_storage_capacity": "How much food can this subunit store?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: subunit",
            "has_personal_loyalty": "subunit is clan retinue<br>Traits: yes/no <br>Supported Scopes: subunit",
            "is_cohort": "unit is cohort<br>Traits: yes/no <br>Supported Scopes: subunit",
            "is_migration": "unit is Migration<br>Traits: yes/no <br>Supported Scopes: subunit",
            "is_ship": "subunit is Ship<br>Traits: yes/no <br>Supported Scopes: subunit",
            "ship_category": "Checks if a sub_unit is of a specific ship-category (light/medium/heavy)<br>Supported Scopes: subunit",
            "sub_unit_type": "Checks if a sub_unit is of a specific type<br>Supported Scopes: subunit",
            "subunit_morale_percentage": "How many percent morale does this subunit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: subunit",
            "subunit_strength_percentage": "How many percent strength does this subunit have???<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: subunit",
            "has_legion_trigger": "has legion<br>Traits: yes/no <br>Supported Scopes: character, unit, governorship",
            "any_party_member": "Iterate through all members of a party<br>any_party_member = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: party<br>Supported Targets: character",
            "has_active_agenda": "Does the country have any agenda?<br>Traits: yes/no <br>Supported Scopes: party",
            "has_power_percentage": "The faction's percentage of senatorial influence<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: party",
            "is_party_type": "Check if scope is a certain faction<br>Traits: class CPartyTypeDataBase key<br>Supported Scopes: party",
            "party_approval": "Does the current country scope have the given faction approval<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: party",
            "any_family_member": "Iterate through all members of a family<br>any_family_member = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: family<br>Supported Targets: character",
            "is_grateful": "is the scope grateful<br>Traits: yes/no <br>Supported Scopes: family",
            "is_scorned": "is the scope scorned<br>Traits: yes/no <br>Supported Scopes: family",
            "num_of_expected_jobs": "returns number of expected jobs<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: family",
            "num_of_jobs": "returns number of current jobs<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: family",
            "num_of_members": "does the family have the required members?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: family",
            "prestige": "does the family have the required Prestige?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: family",
            "any_legion_commander": "commanders in legion<br>any_legion_commander = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: legion<br>Supported Targets: character",
            "any_legion_unit": "units in legion<br>any_legion_unit = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: legion<br>Supported Targets: unit",
            "can_add_commander": "is there room for more commanders in this legion?<br>Traits: yes/no <br>Supported Scopes: legion",
            "commander_count": "how many commanders does this legion have?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: legion",
            "distinction_count": "how many distinctions does this legion have?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: legion",
            "has_distinction": "does this legion have that distinction?<br>Traits: class CLegionDistinctionDatabase key<br>Supported Scopes: legion",
            "unit_count": "how many units does this legion have?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: legion",
            "has_breach": "siege has breach<br>Traits: yes/no <br>Supported Scopes: siege",
            "any_war_attacker": "Iterate through all attackers in a war<br>any_war_attacker = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: war<br>Supported Targets: country",
            "any_war_defender": "Iterate through all war defenders<br>any_war_defender = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: war<br>Supported Targets: country",
            "any_war_participant": "Iterate through all war participants<br>any_war_participant = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: war<br>Supported Targets: country",
            "is_civil_war": "Is this a civil war<br>Traits: yes/no <br>Supported Scopes: war",
            "is_war_leader": "Is target country a war leader of this war?<br>Traits: country tag/country scope<br>Supported Scopes: war<br>Supported Targets: country",
            "is_war_over": "Does this war have any participants, and is it current?<br>Traits: yes/no <br>Supported Scopes: war",
            "war_score": "is the target country's war score against the opposing war leader COMPARATOR VALUE? war_score = { target = X [*value &gt;/&lt;&ge;/&le; Y* or *value = { min max }*  }<br>Supported Scopes: war",
            "deity_religion": "Does this deity have this religion?<br>Traits: class CReligionDatabase key/religion scope<br>Supported Scopes: deity<br>Supported Targets: religion",
            "has_active_modifier": "Does this deity have a this active modifier?<br>Supported Scopes: deity",
            "has_holy_site": "does this deity have a holy site??<br>Traits: yes/no <br>Supported Scopes: deity",
            "has_passive_modifier": "Does this deity have this passive modifier?<br>Supported Scopes: deity",
            "ai_wants_road": "Does AI for a country want to build road in this province?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "any_great_work_in_province": "Iterate through all great works in a province<br>any_great_work_in_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: province<br>Supported Targets: great_work",
            "any_neighbor_province": "Iterate through all neighbors of a province<br>any_neighbor_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: province<br>Supported Targets: province",
            "any_pops_in_province": "Iterate through all pops in a province<br>any_pops_in_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: province<br>Supported Targets: pop",
            "any_province_treasure": "Iterate through all province treasures<br>any_province_treasure = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: province<br>Supported Targets: treasure",
            "any_unit_in_province": "Iterate through all units in a province<br>any_unit_in_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: province<br>Supported Targets: unit",
            "can_build_building": "Can the province build a specific building?<br>Supported Scopes: province",
            "can_have_port": "Can this province build a port<br>Traits: yes/no <br>Supported Scopes: province",
            "can_use_unit_ability": "check if a Unit can use a unit ability in province (sent to ability's scope:province)<br>Supported Scopes: province",
            "citizen_happiness": "Checks hapiness for population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "civilization_value": "does the province have the required CivilizationValue?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "control_range": "Is province in control range of country<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "distance_to_migration_target": "does the province have the required Population Capacity?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "dominant_province_culture": "Checks if a culture is dominant in a province <br>Traits: culture db key/culture scope<br>Supported Scopes: province<br>Supported Targets: culture",
            "dominant_province_religion": "Checks if a religion is dominant in a province <br>Traits: class CReligionDatabase key/religion scope<br>Supported Scopes: province<br>Supported Targets: religion",
            "fort_level": "does the province have the required fort level?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "free_building_slots": "does the province have the amount of free building slots?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "freemen_happiness": "Checks hapiness for population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "governor_policy": "Checks if a province is in a state that has a specific governor_policy<br>Supported Scopes: province",
            "great_work_locator_is_free": "Is the great work locator in the province free. Written as great_work_locator_is_free = primary_great_work<br>Supported Scopes: province",
            "has_ancient_wonder": "Do the province has the ancient wonder. Written as has_ancient_wonder = key_of_ancient_wonder<br>Supported Scopes: province",
            "has_building": "Checks if a province has a specific building<br>Supported Scopes: province",
            "has_city_status": "is the province a City or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "has_construction": "has construction<br>Traits: yes/no <br>Supported Scopes: province",
            "has_enemy_army": "does the province has an enemy army of target?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "has_enemy_navy": "does the province has an enemy navy of target?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "has_great_work": "has great work<br>Traits: yes/no <br>Supported Scopes: province",
            "has_minor_river": "does the province have a minor river or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "has_owner": "does the province have an owner or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "has_province_modifier": "check if a Province has a specific modifier<br>Supported Scopes: province",
            "has_province_rank": "Checks if a province is of a specific rank<br>Supported Scopes: province",
            "has_road_towards": "Is there a road to the target province?<br>Traits: province id/province scope<br>Supported Scopes: province<br>Supported Targets: province",
            "has_siege": "is the province sieged or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "has_specific_construction": "Has the province a specific construction currently ongoing?<br>Traits: yes/no <br>Supported Scopes: province",
            "has_winter": "Checks if a province has any level of winter<br>Traits: yes/no <br>Supported Scopes: province",
            "is_adjacent_to_major_river": "does the province have a minor river or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_capital": "is the province a capital or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_coastal": "is the province coastal or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_colonizer": "is a country the original colonizer of a province?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "is_core_of": "is the province a core of target  or not?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "is_holy_site": "is this province a holy site?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_importing_trade_good": "Checks if the state of a province is importing a certain trade good.<br>Supported Scopes: province",
            "is_in_area": "Does the scoped city belong to a given named area or the same area as the target city<br>area = my_area_name OR area = from.capital_scope<br>Supported Scopes: province",
            "is_in_region": "Does the scoped city belong to a given named Region or the same Region as the target city<br>Region = my_Region_name OR Region = from.capital_scope<br>Supported Scopes: province",
            "is_inhabitable": "is the province inhabitable or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_model_shown": "Do the province has the model shown. Written as is_model_shown=name_of_model<br>Supported Scopes: province",
            "is_neighbor": "Is this a neighbour of the target province?<br>Traits: province id/province scope<br>Supported Scopes: province<br>Supported Targets: province",
            "is_port": "is the province a Port or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_previous_controller": "is a country the previous controller of a province?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "is_previous_owner": "is a country the previous owner of a province?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "is_sea": "is the province a sea province?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_state_capital": "is the province a StateCapital or not?<br>Traits: yes/no <br>Supported Scopes: province",
            "is_uninhabitable": "is the province uninhabitable?<br>Traits: yes/no <br>Supported Scopes: province",
            "nobles_happiness": "Checks hapiness for population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_foreign_culture": "does the province have the required num_foreign_culture ?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_goods_produced": "does the province have the required number of produced goods ?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_academy_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_aqueduct_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_barracks_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_basic_settlement_infratructure_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_citizen": "Checks population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_commerce_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_court_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_fortress_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_fortress_ramparts_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_forum_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_foundry_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_freemen": "Checks population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_hill_fort": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_latifundia_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_library_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_local_forum_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_military_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_nobles": "Checks population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_population_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_port_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_slave_mine_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_slaves": "Checks population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_temple_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_theathre_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_total_building_slots": "Compare total number of building slots in a province<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_town_hall_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_tribesmen": "Checks population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_used_building_slots": "Compare used number of building slots in a province<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_of_workshop_building": "Compare number of buildings of type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_other_religion": "does the province have the required num_other_religion ?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "num_province_treasures": "does the province have a required amount of treasures?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "owned_or_subject_owned": "Is the province owned by the target country or one of its subjects?<br>Traits: country tag/country scope<br>Supported Scopes: province<br>Supported Targets: country",
            "population_cap": "does the province have the required Population Capacity?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "province_dominant_culture_group": "Checks if the dominant culture in a province belongs to a certain group<br>Supported Scopes: province",
            "province_id": "does the province have this ID?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "province_income": "does the province have the required income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "province_manpower_income": "does the province have the required Manpower Income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "province_tax_income": "does the province have the required tax income?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "province_unrest": "does the province have the required province_unrest?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "slaves_happiness": "Checks hapiness for population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "state_loyalty": "does the province have the required state_loyalty?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "terrain": "Checks if a province is of a specific terrain type<br>Supported Scopes: province",
            "total_population": "does the province have the required TotalPopulation?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "trade_goods": "Checks if a province has a specific trade_goods<br>Supported Scopes: province",
            "tribesmen_happiness": "Checks hapiness for population of a specified type<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: province",
            "country_culture_pop_count": "pops of a particular culture<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country culture",
            "has_country_culture_modifier": "does the country culture have a specific modifier<br>Supported Scopes: country culture",
            "has_pop_type_right": "Does this country culture have this poptype right<br>Traits: class CPopTypeDataBase key<br>Supported Scopes: country culture",
            "integration_progress": "does the country culture have the amount of integration progress?<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: country culture",
            "is_culture": "Is this this culture the same as the country culture's culture?<br>Traits: culture db key/culture scope<br>Supported Scopes: country culture<br>Supported Targets: culture",
            "is_integrated": "is this country culture integrated?<br>Traits: yes/no <br>Supported Scopes: country culture",
            "any_neighbor_region": "Iterate through all neighbouring regions of a region<br>any_neighbor_region = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: region<br>Supported Targets: region",
            "any_region_area": "Iterate through all areas in a region<br>any_region_area = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: region<br>Supported Targets: area",
            "any_region_province": "Iterate through all ownable provinces in a region<br>any_region_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: region<br>Supported Targets: province",
            "any_region_province_including_unownable": "Iterate through all provinces in a region<br>any_region_province_including_unownable = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: region<br>Supported Targets: province",
            "any_region_state": "Iterate through all states in a region<br>any_region_state = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: region<br>Supported Targets: state",
            "add_to_temporary_list": 'Saves a temporary target for use during the trigger execution<br>This is used to build lists in triggers.<br>If used within an any-trigger, placement within the trigger is quite important. The game will iterate through every instance of the any-trigger until it finds a single instance that fulfills the requirements, and then it will stop.<br>In order to add every instance of a scope that fulfills certain conditions, use "count = all" while also placing this "effect" at the very end of the any-trigger (so that every condition is evaluated for every iteration).<br>Supported Scopes: none',
            "all_false": "true if all children are false (equivalent to NOR)<br>Supported Scopes: none",
            "always": "Always the same value<br>Traits: yes/no <br>Supported Scopes: none",
            "and": "all inside trigger must be true<br>Supported Scopes: none",
            "any_active_war": "Iterate through all currently active wars<br>any_active_war = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: war",
            "any_area": "Iterate through all existing areas<br>any_area = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: area",
            "any_country": "Iterate through all existing countries<br>any_country = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: country",
            "any_deity": "Iterate through all existing deities<br>any_deity = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: deity",
            "any_ended_war": "Iterate through all previous wars<br>any_ended_war = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: war",
            "any_false": "true if any child is false (equivalent to NAND)<br>Supported Scopes: none",
            "any_holy_site": "All holy sites in a country<br>any_holy_site = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: province",
            "any_in_global_list": "Iterate through all items in global list. list = name or variable = name<br>any_in_global_list = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none",
            "any_in_list": "Iterate through all items in list. list = name or variable = name<br>any_in_list = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none",
            "any_in_local_list": "Iterate through all items in local list. list = name or variable = name<br>any_in_local_list = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none",
            "any_living_character": "Checks if any living character meets the specified criteria<br>any_living_character = { triggers }<br>Supported Scopes: none",
            "any_ownable_province": "Iterate through all ownable provinces in the world<br>any_ownable_province = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: province",
            "any_province": "Checks if any province meets the specified criteria<br>any_province = { triggers }<br>Supported Scopes: none",
            "any_region": "Iterate through all existing regions<br>any_region = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: region",
            "any_sea_and_river_zone": "Iterate through all sea and river zones in the world<br>any_sea_and_river_zone = { count=num/all / percent=fixed_point [triggers] }<br>Supported Scopes: none<br>Supported Targets: province",
            "assert_if": "Conditionally cause an assert during run time<br>assert_if = { limit = { X } text = Y }, where X is a trigger and Y is an optional string<br>Supported Scopes: none",
            "assert_read": "Conditionally cause an assert during read time<br>assert_read = X, where X is yes or the string to be printed in the assert<br>Supported Scopes: none",
            "calc_true_if": "Returns true if the specified number of sub-triggers return true<br>calc_true_if = { amount = 2 <trigger> <trigger> <trigger> }<br>Supported Scopes: none",
            "culture_pops_in_country": "The percentage of pops in country matching this country culture<br>Supported Scopes: none",
            "current_date": "Compare the current date.<br>Traits: &lt;, =,&gt; valid date<br>Supported Scopes: none",
            "custom_tooltip": "Replaces the tooltips for the enclosed triggers with a custom text<br>custom_tooltip = {<br>	text = <text><br>	<trigger><br>}<br>Supported Scopes: none",
            "debug_only": "Checks if the game is in debug mode or not.<br>Traits: yes/no <br>Supported Scopes: none",
            "exists": "Checks whether the specified socope target exists (check for not being the null object)<br>exists = from.owner.var:cool_var.mother<br>Supported Scopes: none",
            "game_start_date": "Compare the date of the bookmarked game launched.<br>Traits: &lt;, =, &gt; valid date<br>Supported Scopes: none",
            "gender_rules": "Checks if the game has gender-equality rules<br>Traits: yes/no <br>Supported Scopes: none",
            "global_variable_list_size": "Checks the size of a variable list<br>variable_list_size = { name = X target &ge; Y }<br>Where X is the name of the variable<br>Where Y is a script value or number<br>Supported Scopes: none",
            "has_agenda": "Does the country have any agenda?<br>Supported Scopes: none",
            "has_dlc": "Does the host have this DLC<br>Supported Scopes: none",
            "has_global_variable": "Checks whether the current scope has the specified variable set<br>has_variable = name<br>Supported Scopes: none",
            "has_global_variable_list": "Checks whether the current scope has the specified variable list set<br>has_variable_list = name<br>Supported Scopes: none",
            "has_local_variable": "Checks whether the current scope has the specified variable set<br>has_variable = name<br>Supported Scopes: none",
            "has_local_variable_list": "Checks whether the current scope has the specified variable list set<br>has_variable_list = name<br>Supported Scopes: none",
            "has_variable": "Checks whether the current scope has the specified variable set<br>has_variable = name<br>Supported Scopes: none",
            "has_variable_list": "Checks whether the current scope has the specified variable list set<br>has_variable_list = name<br>Supported Scopes: none",
            "is_dynamic_tag": "if a country is dynamically created<br>Traits: yes/no <br>Supported Scopes: none",
            "is_in_list": "Checks if a target in in a list<br>Supported Scopes: none",
            "is_iron_man": "Checks if the game is in iron man mode.<br>Traits: yes/no <br>Supported Scopes: none",
            "is_monotheist_religion": "If a country's religion is monotheistic<br>Traits: yes/no <br>Supported Scopes: none",
            "is_target_alive": "Is the target character alive?<br>Traits: character scope<br>Supported Scopes: none<br>Supported Targets: character",
            "is_target_in_global_variable_list": "Checks if a target is in a variable list<br>is_target_in_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "is_target_in_local_variable_list": "Checks if a target is in a variable list<br>is_target_in_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "is_target_in_variable_list": "Checks if a target is in a variable list<br>is_target_in_variable_list = { name = X target = Y }<br>Where X is the name of the variable<br>Where Y is an event target<br>Supported Scopes: none",
            "list_size": "Checks the size of a list<br>list_size = { name = X value &ge; Y }<br>Where X is the name of the list<br>Where Y is a script value<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;<br>Supported Scopes: none",
            "local_variable_list_size": "Checks the size of a variable list<br>variable_list_size = { name = X target &ge; Y }<br>Where X is the name of the variable<br>Where Y is a script value or number<br>Supported Scopes: none",
            "nand": "a negated AND trigger<br>Supported Scopes: none",
            "nor": "a negated OR trigger<br>Supported Scopes: none",
            "not": "negates content of trigger<br>Supported Scopes: none",
            "or": "at least one entry inside trigger must be true<br>Supported Scopes: none",
            "religion_pops_in_country": "The percentage of pops in country matching this religion<br>Supported Scopes: none",
            "save_temporary_scope_as": "Saves a temporary target for use during the trigger execution<br>Supported Scopes: none",
            "switch": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.<br>switch = {<br>	trigger = simple_assign_trigger<br>	case_1 = { [triggers] }<br>	case_2 = { [triggers] }<br>	case_n = { [triggers] }<br>	fallback = { [triggers] }<br>Supported Scopes: none",
            "target_is_valid_character": "Checks whether the specified scope target is a valid character<br>Traits: character scope<br>Supported Scopes: none<br>Supported Targets: character",
            "trigger_else": "Evaluates the triggers if the display_triggers of preceding 'trigger_if' or 'trigger_else_if' is not mettrigger_if = { limit = { <display_triggers> } [triggers] }<br> trigger_else = { [triggers] }<br>Supported Scopes: none",
            "trigger_else_if": "Evaluates the enclosed triggers if the display_triggers of the preceding `trigger_if` or `trigger_else_if` is not met and its own display_trigger of the limit is mettrigger_if = { limit = { <display_triggers> } [triggers] }<br>trigger_else_if = { limit = { <display_triggers> } [triggers] }<br>Supported Scopes: none",
            "trigger_if": "Evaluates the triggers if the display_triggers of the limit are met<br>trigger_if = { limit = { <display_triggers> } [triggers] }<br>Supported Scopes: none",
            "variable_list_size": "Checks the size of a variable list<br>variable_list_size = { name = X target &ge; Y }<br>Where X is the name of the variable<br>Where Y is a script value or number<br>Supported Scopes: none",
            "weighted_calc_true_if": "Returns true if the sum of weights of fulfilled sub-triggers amount to the specified sum<br>weighted_calc_true_if = { amount = 10 5 = { <trigger> } 15 = { <trigger> } 7 = { <trigger> } }<br>Supported Scopes: none",
            "in_color_list": "Check if the scoped color is part of the given color list<br>Supported Scopes: color",
            "is_color": "Check if the scoped color is the same as another color. The right hand side can be either a hex, rgb, or hsv color,  or a named color, or another color scope.<br>Supported Scopes: color",
            "is_pop_type_right": "Does this country culture have this poptype right<br>Traits: class CPopTypeDataBase key<br>Supported Scopes: poptype",
        }
        self.ScopesList = {
            "character_party": "Scope to a characters party<br>Input Scopes: character<br>Output Scopes: party",
            "employer": "Scope to a character's employing country<br>Input Scopes: character<br>Output Scopes: country",
            "family": "Scope to a character's family<br>Input Scopes: character<br>Output Scopes: family",
            "father": "Scope from a character to their mother<br>Input Scopes: character<br>Output Scopes: character",
            "home_country": "Input Scopes: character<br>Output Scopes: country",
            "job": "Scope to a characters job<br>Input Scopes: character<br>Output Scopes: job",
            "mother": "Scope from a character to their mother<br>Input Scopes: character<br>Output Scopes: character",
            "next_in_family": "Input Scopes: character<br>Output Scopes: character",
            "preferred_heir": "Input Scopes: character<br>Output Scopes: character",
            "ruler": "Scope to the ruler of the country a character is in<br>Input Scopes: character<br>Output Scopes: character",
            "spouse": "Scope from a character to their spouse<br>Input Scopes: character<br>Output Scopes: character",
            "treasure_owner": "Input Scopes: treasure<br>Output Scopes: country, character, province",
            "color1": "Input Scopes: country<br>Output Scopes: color",
            "color2": "Input Scopes: country<br>Output Scopes: color",
            "color3": "Input Scopes: country<br>Output Scopes: color",
            "consort": "Scope from a character to their consort<br>Input Scopes: country<br>Output Scopes: character",
            "current_co_ruler": "Scope to the co-ruler of a country<br>Input Scopes: country<br>Output Scopes: character",
            "current_heir": "Scope to the current heir of a country<br>Input Scopes: country<br>Output Scopes: character",
            "current_ruler": "Scope to the current ruler of a country<br>Input Scopes: country<br>Output Scopes: character",
            "fam": "Scope to  Requires Data: yes<br>Input Scopes: country<br>Output Scopes: family",
            "overlord": "Scope to a subject's overlord Input Scopes: country<br>Output Scopes: country",
            "party": "Requires Data: yes<br>Input Scopes: country<br>Output Scopes: party",
            "primary_heir": "SInput Scopes: country<br>Output Scopes: character",
            "secondary_heir": "Input Scopes: country<br>Output Scopes: character",
            "country": "Input Scopes: character, pop, job<br>Output Scopes: country",
            "legion": "Input Scopes: character, unit, governorship<br>Output Scopes: legion",
            "religion": "Input Scopes: country, character, province, pop, deity<br>Output Scopes: religion",
            "party_country": "Input Scopes: party<br>Output Scopes: country",
            "party_leader": "Input Scopes: party<br>Output Scopes: character",
            "color": "Input Scopes: country, religion, culture group<br>Output Scopes: color",
            "siege_controller": "Scope to the current controlling country of a siege<br>Input Scopes: siege<br>Output Scopes: country",
            "area": "Scope to the area of a province or state<br>Input Scopes: province, state<br>Output Scopes: area",
            "governorship": "Scope to the governorship of a province or state<br>Input Scopes: province, state<br>Output Scopes: governorship",
            "country_culture": "Input Scopes: country, province, pop<br>Output Scopes: country culture",
            "deified_ruler": "Input Scopes: deity<br>Output Scopes: character",
            "holy_site": "Scope to the holy site of a deity<br>Input Scopes: deity<br>Output Scopes: province",
            "location": "Scope to the location of a character, siege, or pop<br>Input Scopes: character, siege, pop<br>Output Scopes: province",
            "region": "Scope to the region of a province, area, or state<br>Input Scopes: province, area, state<br>Output Scopes: region",
            "blue": "The blue value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "brightness": "The brightness value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "green": "The green value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "hue": "The hue value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "red": "The red value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "saturation": "The saturation value of a color<br>Input Scopes: color<br>Output Scopes: value",
            "commander": "Scope to the commander of a unit<br>Input Scopes: unit<br>Output Scopes: character",
            "unit_destination": "Input Scopes: unit<br>Output Scopes: province",
            "unit_location": "Scope from a unit to its location<br>Input Scopes: unit<br>Output Scopes: province",
            "unit_next_location": "Input Scopes: unit<br>Output Scopes: province",
            "unit_objective_destination": "Input Scopes: unit<br>Output Scopes: province",
            "unit_owner": "Input Scopes: unit<br>Output Scopes: country",
            "culture_group": "Scope to the culture group of a country, character, province, pop or culture<br>Input Scopes: country, character, province, pop, culture<br>Output Scopes: culture group",
            "owning_unit": "Scope to the owning unit of a subunit<br>Input Scopes: subunit<br>Output Scopes: unit",
            "personal_loyalty": "Input Scopes: subunit<br>Output Scopes: character",
            "character": "Input Scopes: job<br>Output Scopes: character",
            "owner": "Input Scopes: province, state, governorship, legion<br>Output Scopes: country",
            "family_country": "Input Scopes: family<br>Output Scopes: country",
            "head_of_family": "Input Scopes: family<br>Output Scopes: character",
            "culture": "Input Scopes: country, character, province, pop, country culture<br>Output Scopes: culture",
            "governor": "Input Scopes: province, state, governorship<br>Output Scopes: character",
            "governor_or_ruler": "Input Scopes: province, state, governorship<br>Output Scopes: character",
            "job": "Requires Data: yes<br>Input Scopes: country, province, state, governorship<br>Output Scopes: job",
            "job_holder": "Requires Data: yes<br>Input Scopes: country, province, state, governorship<br>Output Scopes: character",
            "attacker_warleader": "Input Scopes: war<br>Output Scopes: country",
            "defender_warleader": "Input Scopes: war<br>Output Scopes: country",
            "controller": "Input Scopes: province<br>Output Scopes: country",
            "dominant_province_culture": "Input Scopes: province<br>Output Scopes: culture",
            "dominant_province_culture_group": "Input Scopes: province<br>Output Scopes: culture group",
            "dominant_province_religion": "Input Scopes: province<br>Output Scopes: religion",
            "holding_owner": "Input Scopes: province<br>Output Scopes: character",
            "province_deity": "Input Scopes: province<br>Output Scopes: deity",
            "state": "Scoppe to the state (the part of a area the province owner owns) of a province<br>Input Scopes: province<br>Output Scopes: state",
            "array_define": "Reference the value of a numeric value in an array define: array_define:Namespace|Name|Index. Index is 0-based.<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: value",
            "c": "Scope to a country by key<br>Requires Data: yes<br>Output Scopes: country",
            "char": "Requires Data: yes<br>Output Scopes: character",
            "compare_value": "A comparison trigger that will return its value in the context it is used eg: root.gold<br>Wild Card: yes<br>Output Scopes: value",
            "custom": "Adds custom text between scope changes<br>Requires Data: yes",
            "define": "Reference the value of a numeric define: define:Namespace|Name<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: value",
            "deity": "Requires Data: yes<br>Output Scopes: deity",
            "flag": "Flag literals eg: flag:the_boss<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: flag",
            "global_var": "Reference a previous set global variable via its name eg: global_var:important_thing<br>Requires Data: yes<br>Global Link: yes",
            "local_var": "Reference a previous set local variable via its name eg: local_var:person_of_interest<br>Requires Data: yes<br>Global Link: yes",
            "named_script_value": "A script value that will calculate and returns its value in the context it is used<br>Wild Card: yes<br>Output Scopes: value",
            "no": "Boolean literal for false values<br>Global Link: yes<br>Output Scopes: bool",
            "p": "Requires Data: yes<br>Output Scopes: province",
            "prev": "The previous scope",
            "root": "The head of the current top scope eg: reciever of an event, taker of a decision<br>Global Link: yes",
            "scope": "Reference a previously saved scope via its name eg: scope:target<br>Requires Data: yes<br>Global Link: yes",
            "this": "The current scope",
            "treasure": "Scope to a treasure by key<br>Requires Data: yes<br>Output Scopes: treasure",
            "value": "A numeric literal value eg: 1, 5.2, -6<br>Wild Card: yes<br>Global Link: yes<br>Output Scopes: value",
            "var": "Reference a previous set variable via its name eg: var:mortal_enemy<br>Requires Data: yes",
            "yes": "Boolean literal for true values<br>Global Link: yes<br>Output Scopes: bool",
            "siege": "Input Scopes: province, unit<br>Output Scopes: siege",
            "capital_scope": "Scope to the capital of a country, state, or governorship<br>Input Scopes: country, state, governorship<br>Output Scopes: province",
        }
        self.ModifersList = {
            "build_cost": "Category: country",
            "build_time": "Category: country",
            "minimum_unrest": "Category: province",
            "local_unrest": "Category: province",
            "global_unrest": "Category: country",
            "tax_income": "Category: province",
            "global_tax_income": "Category: province",
            "local_tax_modifier": "Category: province",
            "global_tax_modifier": "Category: country",
            "local_population_growth": "Category: province",
            "global_population_growth": "Category: country",
            "local_population_capacity": "Category: province",
            "local_population_capacity_modifier": "Category: province",
            "global_population_capacity_modifier": "Category: country",
            "total_population_capacity_modifier": "Category: province",
            "local_building_slot": "Category: province",
            "global_building_slot": "Category: country",
            "global_monthly_state_loyalty": "Category: country",
            "local_monthly_state_loyalty": "Category: state",
            "city_monthly_state_loyalty": "Category: province",
            "happiness_for_wrong_culture_modifier": "Category: province",
            "happiness_for_wrong_culture_group_modifier": "Category: province",
            "happiness_for_same_culture_modifier": "Category: province",
            "local_happiness_for_same_culture_modifier": "Category: province",
            "happiness_for_same_religion_modifier": "Category: province",
            "local_happiness_for_same_religion_modifier": "Category: province",
            "global_population_happiness": "Category: province",
            "local_population_happiness": "Category: province",
            "land_morale": "Category: country",
            "naval_morale": "Category: country",
            "land_morale_modifier": "Category: country",
            "naval_morale_modifier": "Category: country",
            "non_retinue_morale_modifier": "Category: country",
            "local_manpower": "Category: province",
            "global_manpower": "Category: country",
            "local_manpower_modifier": "Category: province",
            "global_manpower_modifier": "Category: country",
            "manpower_recovery_speed": "Category: country",
            "attrition": "Category: province",
            "land_unit_attrition": "Category: country",
            "naval_unit_attrition": "Category: country",
            "army_weight_modifier": "Category: country",
            "navy_weight_modifier": "Category: country",
            "max_attrition": "Category: province",
            "supply_limit": "Category: province",
            "supply_limit_modifier": "Category: province",
            "global_supply_limit_modifier": "Category: country",
            "war_exhaustion": "Category: country",
            "max_war_exhaustion": "Category: country",
            "fort_level": "Category: province",
            "blockade_efficiency": "Category: country",
            "monthly_centralization": "Category: country",
            "monthly_legitimacy": "Category: country",
            "agressive_expansion_impact": "Category: country",
            "agressive_expansion_monthly_change": "Category: country",
            "agressive_expansion_monthly_decay": "Category: country",
            "local_ship_recruit_speed": "Category: province",
            "local_cohort_recruit_speed": "Category: province",
            "global_ship_recruit_speed": "Category: country",
            "global_cohort_recruit_speed": "Category: country",
            "garrison_size": "Category: country",
            "garrison_growth": "Category: province",
            "technology_investment": "Category: country",
            "movement_cost": "Category: province",
            "army_movement_speed": "Category: province",
            "navy_movement_speed": "Category: province",
            "movement_speed_if_no_road": "Category: province",
            "local_state_trade_routes": "Category: state",
            "global_capital_trade_routes": "Category: country",
            "global_state_trade_routes": "Category: country",
            "research_points": "Category: country",
            "research_points_modifier": "Category: country",
            "local_research_points_modifier": "Category: province",
            "omen_power": "Category: country",
            "omen_duration": "Category: country",
            "discipline": "Category: country",
            "local_defensive": "Category: province",
            "global_defensive": "Category: country",
            "commerce_value": "Category: country",
            "local_commerce_value_modifier": "Category: country",
            "global_commerce_modifier": "Category: country",
            "global_export_commerce_modifier": "Category: country",
            "global_import_commerce_modifier": "Category: country",
            "state_commerce_modifier": "Category: country",
            "tribute_income_modifier": "Category: country",
            "ruler_popularity_gain": "Category: country",
            "max_loyalty": "Category: country",
            "integrate_speed": "Category: country",
            "fabricate_claim_speed": "Category: country",
            "monthly_wage_for_character": "Category: character",
            "monthly_wage_modifier": "Category: country",
            "monthly_wage_on_character_modifier": "Category: character",
            "monthly_governor_wage": "Category: country",
            "monthly_local_governor_wage": "Category: country",
            "monthly_character_popularity": "Category: country",
            "monthly_character_popularity_decay": "Category: country",
            "monthly_character_prominence": "Category: country",
            "monthly_character_fam_prestige": "Category: country",
            "cohort_reinforcement_speed": "Category: country",
            "land_morale_recovery": "Category: country",
            "naval_morale_recovery": "Category: country",
            "siege_ability": "Category: country",
            "assault_ability": "Category: country",
            "siege_engineers": "Category: country",
            "diplomatic_reputation": "Category: country",
            "diplomatic_relations": "Category: country",
            "max_rivals": "Category: country",
            "max_friends": "Category: country",
            "current_corruption": "Category: character",
            "monthly_corruption": "Category: country",
            "subject_opinions": "Category: country",
            "subject_loyalty": "Category: country",
            "loyalty_to_overlord": "Category: country",
            "fort_maintenance_cost": "Category: country",
            "army_maintenance_cost": "Category: country",
            "navy_maintenance_cost": "Category: country",
            "mercenary_land_maintenance_cost": "Category: country",
            "mercenary_naval_maintenance_cost": "Category: country",
            "country_civilization_value": "Category: country",
            "local_country_civilization_value": "Category: country",
            "local_monthly_civilization": "Category: province",
            "global_monthly_civilization": "Category: country",
            "global_start_experience": "Category: country",
            "local_start_experience": "Category: province",
            "global_cohort_start_experience": "Category: country",
            "local_cohort_start_experience": "Category: province",
            "global_ship_start_experience": "Category: country",
            "local_ship_start_experience": "Category: province",
            "experience_decay": "Category: country",
            "monthly_experience_gain": "Category: country",
            "martial": "Category: character",
            "finesse": "Category: character",
            "charisma": "Category: character",
            "zeal": "Category: character",
            "fertility": "Category: character",
            "health": "Category: character",
            "barbarian_growth": "Category: country",
            "barbarian_spawn_chance": "Category: country",
            "loyalty_gain_chance": "Category: country",
            "loyalty_gain_chance_modifier": "Category: country",
            "prominence": "Category: character",
            "senate_influence": "Category: country",
            "monthly_party_approval": "Category: country",
            "monthly_tyranny": "Category: country",
            "monthly_political_influence": "Category: country",
            "monthly_political_influence_modifier": "Category: country",
            "retreat_delay": "Category: country",
            "improve_relation_impact": "Category: country",
            "hostile_attrition": "Category: country",
            "local_hostile_attrition": "Category: province",
            "election_term_duration": "Category: country",
            "ship_repair_at_sea": "Category: country",
            "war_score_cost": "Category: country",
            "base_resources": "Category: province",
            "local_goods_from_slaves": "Category: province",
            "global_goods_from_slaves": "Category: country",
            "disallow_job": "Category: character",
            "disallow_office": "Category: character",
            "disallow_command": "Category: character",
            "show_3d_fort": "Category: character",
            "control_range_modifier": "Category: character",
            "diplomatic_range_modifier": "Category: character",
            "monthly_character_wealth": "Category: character",
            "primary_heir_attraction": "Category: character",
            "support_for_character_as_heir": "Category: character",
            "next_ruler_legitimacy": "Category: character",
            "num_of_clan_chiefs": "Category: character",
            "clan_retinue_size": "Category: character",
            "enslavement_efficiency": "Category: character",
            "local_output_modifier": "Category: character",
            "holdings_possible_for_character": "Category: character",
            "available_holdings": "Category: character",
            "holding_income_modifier": "Category: character",
            "stability_monthly_change": "Category: country",
            "stability_monthly_decay": "Category: country",
            "civil_war_threshold": "Category: country",
            "ship_capture_chance": "Category: country",
            "naval_damage_done": "Category: country",
            "naval_damage_taken": "Category: country",
            "ship_cost": "Category: country",
            "cohort_cost": "Category: country",
            "pirate_haven": "Category: province",
            "pirate_plunder": "Category: province",
            "anti_piracy_cb": "Category: country",
            "naval_range": "Category: country",
            "monthly_military_experience": "Category: country",
            "monthly_military_experience_modifier": "Category: country",
            "local_pop_promotion_speed": "Category: province",
            "global_pop_promotion_speed": "Category: province",
            "local_pop_promotion_speed_modifier": "Category: province",
            "global_pop_promotion_speed_modifier": "Category: province",
            "local_pop_demotion_speed": "Category: province",
            "global_pop_demotion_speed": "Category: province",
            "local_pop_demotion_speed_modifier": "Category: province",
            "global_pop_demotion_speed_modifier": "Category: province",
            "local_migration_attraction": "Category: province",
            "local_migration_speed": "Category: province",
            "global_migration_speed": "Category: province",
            "local_migration_speed_modifier": "Category: province",
            "global_migration_speed_modifier": "Category: province",
            "local_pop_conversion_speed": "Category: province",
            "global_pop_conversion_speed": "Category: province",
            "local_pop_conversion_speed_modifier": "Category: province",
            "global_pop_conversion_speed_modifier": "Category: province",
            "local_pop_assimilation_speed": "Category: province",
            "global_pop_assimilation_speed": "Category: province",
            "local_pop_assimilation_speed_modifier": "Category: province",
            "global_pop_assimilation_speed_modifier": "Category: province",
            "cultural_integration_speed_modifier": "Category: country",
            "culture_happiness_modifier": "Category: country",
            "local_monthly_food": "Category: province",
            "global_monthly_food_modifier": "Category: country",
            "global_food_capacity": "Category: country",
            "local_food_capacity": "Category: province",
            "local_monthly_food_modifier": "Category: province",
            "local_hostile_food_multiplier": "Category: province",
            "pop_food_consumption": "Category: province",
            "monthly_character_experience": "Category: character",
            "monthly_character_experience_decay": "Category: character",
            "monthly_conviction_for_head_of_family_party": "Category: character",
            "local_base_trade_routes": "Category: province",
            "local_base_trade_routes_modifier": "Category: province",
            "enable_intervene": "Category: country",
            "character_loyalty": "Category: country",
            "general_loyalty": "Category: country",
            "admiral_loyalty": "Category: country",
            "governor_loyalty": "Category: country",
            "clan_chief_loyalty": "Category: country",
            "levy_size_multiplier": "Category: country",
            "great_work_total_workrate_character_modifier": "Category: character",
            "great_work_slaves_workrate_character_modifier": "Category: character",
            "great_work_tribals_workrate_character_modifier": "Category: character",
            "great_work_freemen_workrate_character_modifier": "Category: character",
            "great_work_fixed_prestige_character_modifier": "Category: character",
            "local_combat_width_modifier": "Category: province",
            "watercrossing_enabled_for_river": "Category: country",
            "watercrossing_enabled_for_strait": "Category: country",
            "watercrossing_enabled_for_shore": "Category: country",
            "succession_value": "Category: character",
            "fort_limit": "Category: country",
            "local_fort_limit": "Category: state",
            "global_settlement_building_slot": "Category: country",
            "max_research_efficiency": "Category: country",
            "max_mercenary_stacks": "Category: country",
            "local_citizen_output": "Category: province",
            "global_citizen_output": "Category: country",
            "local_citizen_happyness": "Category: province",
            "culture_citizen_output": "Category: country",
            "global_citizen_happyness": "Category: country",
            "culture_citizen_happiness": "Category: country",
            "local_citizen_desired_pop_ratio": "Category: province",
            "global_citizen_desired_pop_ratio": "Category: country",
            "global_citizen_city_desired_pop_ratio": "Category: province",
            "local_freemen_output": "Category: province",
            "global_freemen_output": "Category: country",
            "local_freemen_happyness": "Category: province",
            "culture_freemen_output": "Category: country",
            "global_freemen_happyness": "Category: country",
            "culture_freemen_happiness": "Category: country",
            "local_freemen_desired_pop_ratio": "Category: province",
            "global_freemen_desired_pop_ratio": "Category: country",
            "global_freemen_city_desired_pop_ratio": "Category: province",
            "local_nobles_output": "Category: province",
            "global_nobles_output": "Category: country",
            "local_nobles_happyness": "Category: province",
            "culture_nobles_output": "Category: country",
            "global_nobles_happyness": "Category: country",
            "culture_nobles_happiness": "Category: country",
            "local_nobles_desired_pop_ratio": "Category: province",
            "global_nobles_desired_pop_ratio": "Category: country",
            "global_nobles_city_desired_pop_ratio": "Category: province",
            "local_slaves_output": "Category: province",
            "global_slaves_output": "Category: country",
            "local_slaves_happyness": "Category: province",
            "culture_slaves_output": "Category: country",
            "global_slaves_happyness": "Category: country",
            "culture_slaves_happiness": "Category: country",
            "local_slaves_desired_pop_ratio": "Category: province",
            "global_slaves_desired_pop_ratio": "Category: country",
            "global_slaves_city_desired_pop_ratio": "Category: province",
            "local_tribesmen_output": "Category: province",
            "global_tribesmen_output": "Category: country",
            "local_tribesmen_happyness": "Category: province",
            "culture_tribesmen_output": "Category: country",
            "global_tribesmen_happyness": "Category: country",
            "culture_tribesmen_happiness": "Category: country",
            "local_tribesmen_desired_pop_ratio": "Category: province",
            "global_tribesmen_desired_pop_ratio": "Category: country",
            "global_tribesmen_city_desired_pop_ratio": "Category: province",
            "appoint_dictator_cost_modifier": "Category: country",
            "hold_triumph_cost_modifier": "Category: country",
            "hold_games_price_cost_modifier": "Category: country",
            "smear_character_cost_modifier": "Category: country",
            "assassinate_attempt_cost_modifier": "Category: country",
            "assassinate_attempt_foreign_cost_modifier": "Category: country",
            "inspire_disloyalty_cost_modifier": "Category: country",
            "build_roads_engineers_cost_modifier": "Category: country",
            "build_roads_cost_modifier": "Category: country",
            "build_expensive_roads_cost_modifier": "Category: country",
            "raid_cost_modifier": "Category: country",
            "citizen_move_cost_modifier": "Category: country",
            "freemen_move_cost_modifier": "Category: country",
            "tribesmen_move_cost_modifier": "Category: country",
            "slaves_move_cost_modifier": "Category: country",
            "desecrate_cost_modifier": "Category: country",
            "build_border_fort_cost_modifier": "Category: country",
            "create_military_colony_cost_modifier": "Category: country",
            "raise_levies_cost_modifier": "Category: country",
            "recruit_character_cost_modifier": "Category: country",
            "recruit_general_cost_modifier": "Category: country",
            "secude_governor_cost_modifier": "Category: country",
            "price_imprison_cost_modifier": "Category: country",
            "price_execute_cost_modifier": "Category: country",
            "price_sacrifice_cost_modifier": "Category: country",
            "subject_pays_tributary_cost_modifier": "Category: country",
            "subject_pays_feudatory_cost_modifier": "Category: country",
            "subject_pays_vassal_cost_modifier": "Category: country",
            "subject_pays_satrapy_cost_modifier": "Category: country",
            "subject_client_state_pays_cost_modifier": "Category: country",
            "subject_colony_pays_cost_modifier": "Category: country",
            "subject_merc_city_state_cost_modifier": "Category: country",
            "price_convert_religion_cost_modifier": "Category: country",
            "price_propose_marriage_cost_modifier": "Category: country",
            "price_support_primary_heir_cost_modifier": "Category: country",
            "price_grant_laurels_cost_modifier": "Category: country",
            "price_tutor_heir_cost_modifier": "Category: country",
            "price_stipends_cost_modifier": "Category: country",
            "price_arena_match_cost_modifier": "Category: country",
            "price_reward_veterans_cost_modifier": "Category: country",
            "price_optimates_party_action_cost_modifier": "Category: country",
            "price_populares_party_action_cost_modifier": "Category: country",
            "price_boni_party_action_cost_modifier": "Category: country",
            "price_oligarchic_party_action_cost_modifier": "Category: country",
            "price_democratic_party_action_cost_modifier": "Category: country",
            "price_traditionalist_party_action_cost_modifier": "Category: country",
            "price_state_investment_military_cost_modifier": "Category: country",
            "price_state_investment_civic_cost_modifier": "Category: country",
            "price_state_investment_oratory_cost_modifier": "Category: country",
            "price_state_investment_religious_cost_modifier": "Category: country",
            "price_oaths_of_allegiance_button_cost_modifier": "Category: country",
            "price_patron_of_arts_button_cost_modifier": "Category: country",
            "price_assemble_raiding_party_button_cost_modifier": "Category: country",
            "price_bring_to_trial_cost_modifier": "Category: country",
            "price_root_out_pirates_cost_modifier": "Category: country",
            "price_anabasis_cost_modifier": "Category: country",
            "price_local_civ_button_cost_modifier": "Category: country",
            "price_scheme_abort_cost_modifier": "Category: country",
            "price_found_city_cost_modifier": "Category: country",
            "price_found_metropolis_cost_modifier": "Category: country",
            "price_revoke_city_status_cost_modifier": "Category: country",
            "price_revoke_metropolis_status_cost_modifier": "Category: country",
            "bribe_pi_cost_modifier": "Category: country",
            "recruit_character_mg_syr_cost_modifier": "Category: country",
            "create_merc_state_price_cost_modifier": "Category: country",
            "seek_spouse_price_cost_modifier": "Category: country",
            "stability_cost_modifier": "Category: country",
            "enact_law_cost_modifier": "Category: country",
            "enact_holy_site_cost_modifier": "Category: country",
            "remove_treasure_cost_modifier": "Category: country",
            "buy_invention_cost_modifier": "Category: country",
            "buy_idea_cost_modifier": "Category: country",
            "call_omen_cost_modifier": "Category: country",
            "change_pantheon_cost_modifier": "Category: country",
            "deify_ruler_cost_modifier": "Category: country",
            "fabricate_claim_cost_modifier": "Category: country",
            "support_rebels_cost_modifier": "Category: country",
            "endorse_party_cost_modifier": "Category: country",
            "send_gift_cost_modifier": "Category: country",
            "improve_relation_cost_modifier": "Category: country",
            "insult_cost_modifier": "Category: country",
            "inspire_devotio_cost_modifier": "Category: country",
            "recruit_mercenary_cost_modifier": "Category: country",
            "start_migration_cost_modifier": "Category: country",
            "buy_military_tradition_cost_modifier": "Category: country",
            "change_governor_policy_cost_modifier": "Category: country",
            "increase_legitimacy_cost_modifier": "Category: country",
            "change_diplomatic_stance_cost_modifier": "Category: country",
            "force_through_senate_cost_modifier": "Category: country",
            "change_pop_type_right_cost_modifier": "Category: country",
            "monarchy_new_ruler_cost_modifier": "Category: country",
            "tribe_new_ruler_cost_modifier": "Category: country",
            "same_party_re_elected_cost_modifier": "Category: country",
            "new_ruling_party_cost_modifier": "Category: country",
            "war_breaking_truce_cost_modifier": "Category: country",
            "war_breaking_truce_with_guarantor_cost_modifier": "Category: country",
            "war_great_relations_cost_modifier": "Category: country",
            "war_good_relations_cost_modifier": "Category: country",
            "war_when_military_acces_cost_modifier": "Category: country",
            "war_no_cb_cost_modifier": "Category: country",
            "war_on_subject_cost_modifier": "Category: country",
            "raise_legion_cost_modifier": "Category: country",
            "price_tribal_duel_cost_modifier": "Category: country",
            "price_force_divorce_cost_modifier": "Category: country",
            "seduce_governor_cost_modifier": "Category: country",
            "price_force_retirement_cost_modifier": "Category: country",
            "offer_citizenship_price_cost_modifier": "Category: country",
            "offer_protection_price_cost_modifier": "Category: country",
            "ruler_retire_price_cost_modifier": "Category: country",
            "training_price_cost_modifier": "Category: country",
            "establish_bithynian_city_price_cost_modifier": "Category: country",
            "new_establish_bithynian_city_price_cost_modifier": "Category: country",
            "establish_sogdian_emporium_price_cost_modifier": "Category: country",
            "new_establish_sogdian_emporium_price_cost_modifier": "Category: country",
            "archers_discipline": "Category: country",
            "archers_morale": "Category: country",
            "archers_offensive": "Category: country",
            "archers_defensive": "Category: country",
            "archers_cost": "Category: country",
            "archers_maintenance_cost": "Category: country",
            "archers_movement_speed": "Category: country",
            "camels_discipline": "Category: country",
            "camels_morale": "Category: country",
            "camels_offensive": "Category: country",
            "camels_defensive": "Category: country",
            "camels_cost": "Category: country",
            "camels_maintenance_cost": "Category: country",
            "camels_movement_speed": "Category: country",
            "chariots_discipline": "Category: country",
            "chariots_morale": "Category: country",
            "chariots_offensive": "Category: country",
            "chariots_defensive": "Category: country",
            "chariots_cost": "Category: country",
            "chariots_maintenance_cost": "Category: country",
            "chariots_movement_speed": "Category: country",
            "engineer_cohort_discipline": "Category: country",
            "engineer_cohort_morale": "Category: country",
            "engineer_cohort_offensive": "Category: country",
            "engineer_cohort_defensive": "Category: country",
            "engineer_cohort_cost": "Category: country",
            "engineer_cohort_maintenance_cost": "Category: country",
            "engineer_cohort_movement_speed": "Category: country",
            "heavy_cavalry_discipline": "Category: country",
            "heavy_cavalry_morale": "Category: country",
            "heavy_cavalry_offensive": "Category: country",
            "heavy_cavalry_defensive": "Category: country",
            "heavy_cavalry_cost": "Category: country",
            "heavy_cavalry_maintenance_cost": "Category: country",
            "heavy_cavalry_movement_speed": "Category: country",
            "heavy_infantry_discipline": "Category: country",
            "heavy_infantry_morale": "Category: country",
            "heavy_infantry_offensive": "Category: country",
            "heavy_infantry_defensive": "Category: country",
            "heavy_infantry_cost": "Category: country",
            "heavy_infantry_maintenance_cost": "Category: country",
            "heavy_infantry_movement_speed": "Category: country",
            "horse_archers_discipline": "Category: country",
            "horse_archers_morale": "Category: country",
            "horse_archers_offensive": "Category: country",
            "horse_archers_defensive": "Category: country",
            "horse_archers_cost": "Category: country",
            "horse_archers_maintenance_cost": "Category: country",
            "horse_archers_movement_speed": "Category: country",
            "light_cavalry_discipline": "Category: country",
            "light_cavalry_morale": "Category: country",
            "light_cavalry_offensive": "Category: country",
            "light_cavalry_defensive": "Category: country",
            "light_cavalry_cost": "Category: country",
            "light_cavalry_maintenance_cost": "Category: country",
            "light_cavalry_movement_speed": "Category: country",
            "light_infantry_discipline": "Category: country",
            "light_infantry_morale": "Category: country",
            "light_infantry_offensive": "Category: country",
            "light_infantry_defensive": "Category: country",
            "light_infantry_cost": "Category: country",
            "light_infantry_maintenance_cost": "Category: country",
            "light_infantry_movement_speed": "Category: country",
            "spearmen_discipline": "Category: country",
            "spearmen_morale": "Category: country",
            "spearmen_offensive": "Category: country",
            "spearmen_defensive": "Category: country",
            "spearmen_cost": "Category: country",
            "spearmen_maintenance_cost": "Category: country",
            "spearmen_movement_speed": "Category: country",
            "supply_train_discipline": "Category: country",
            "supply_train_morale": "Category: country",
            "supply_train_offensive": "Category: country",
            "supply_train_defensive": "Category: country",
            "supply_train_cost": "Category: country",
            "supply_train_maintenance_cost": "Category: country",
            "supply_train_movement_speed": "Category: country",
            "warelephant_discipline": "Category: country",
            "warelephant_morale": "Category: country",
            "warelephant_offensive": "Category: country",
            "warelephant_defensive": "Category: country",
            "warelephant_cost": "Category: country",
            "warelephant_maintenance_cost": "Category: country",
            "warelephant_movement_speed": "Category: country",
            "liburnian_discipline": "Category: country",
            "liburnian_morale": "Category: country",
            "liburnian_offensive": "Category: country",
            "liburnian_defensive": "Category: country",
            "liburnian_cost": "Category: country",
            "liburnian_maintenance_cost": "Category: country",
            "liburnian_movement_speed": "Category: country",
            "trireme_discipline": "Category: country",
            "trireme_morale": "Category: country",
            "trireme_offensive": "Category: country",
            "trireme_defensive": "Category: country",
            "trireme_cost": "Category: country",
            "trireme_maintenance_cost": "Category: country",
            "trireme_movement_speed": "Category: country",
            "tetrere_discipline": "Category: country",
            "tetrere_morale": "Category: country",
            "tetrere_offensive": "Category: country",
            "tetrere_defensive": "Category: country",
            "tetrere_cost": "Category: country",
            "tetrere_maintenance_cost": "Category: country",
            "tetrere_movement_speed": "Category: country",
            "hexere_discipline": "Category: country",
            "hexere_morale": "Category: country",
            "hexere_offensive": "Category: country",
            "hexere_defensive": "Category: country",
            "hexere_cost": "Category: country",
            "hexere_maintenance_cost": "Category: country",
            "hexere_movement_speed": "Category: country",
            "octere_discipline": "Category: country",
            "octere_morale": "Category: country",
            "octere_offensive": "Category: country",
            "octere_defensive": "Category: country",
            "octere_cost": "Category: country",
            "octere_maintenance_cost": "Category: country",
            "octere_movement_speed": "Category: country",
            "mega_galley_discipline": "Category: country",
            "mega_galley_morale": "Category: country",
            "mega_galley_offensive": "Category: country",
            "mega_galley_defensive": "Category: country",
            "mega_galley_cost": "Category: country",
            "mega_galley_maintenance_cost": "Category: country",
            "mega_galley_movement_speed": "Category: country",
            "oasis_combat_bonus": "Category: none",
            "archers_oasis_combat_bonus": "Category: none",
            "camels_oasis_combat_bonus": "Category: none",
            "chariots_oasis_combat_bonus": "Category: none",
            "engineer_cohort_oasis_combat_bonus": "Category: none",
            "heavy_cavalry_oasis_combat_bonus": "Category: none",
            "heavy_infantry_oasis_combat_bonus": "Category: none",
            "horse_archers_oasis_combat_bonus": "Category: none",
            "light_cavalry_oasis_combat_bonus": "Category: none",
            "light_infantry_oasis_combat_bonus": "Category: none",
            "spearmen_oasis_combat_bonus": "Category: none",
            "supply_train_oasis_combat_bonus": "Category: none",
            "warelephant_oasis_combat_bonus": "Category: none",
            "liburnian_oasis_combat_bonus": "Category: none",
            "trireme_oasis_combat_bonus": "Category: none",
            "tetrere_oasis_combat_bonus": "Category: none",
            "hexere_oasis_combat_bonus": "Category: none",
            "octere_oasis_combat_bonus": "Category: none",
            "mega_galley_oasis_combat_bonus": "Category: none",
            "desert_hills_combat_bonus": "Category: none",
            "archers_desert_hills_combat_bonus": "Category: none",
            "camels_desert_hills_combat_bonus": "Category: none",
            "chariots_desert_hills_combat_bonus": "Category: none",
            "engineer_cohort_desert_hills_combat_bonus": "Category: none",
            "heavy_cavalry_desert_hills_combat_bonus": "Category: none",
            "heavy_infantry_desert_hills_combat_bonus": "Category: none",
            "horse_archers_desert_hills_combat_bonus": "Category: none",
            "light_cavalry_desert_hills_combat_bonus": "Category: none",
            "light_infantry_desert_hills_combat_bonus": "Category: none",
            "spearmen_desert_hills_combat_bonus": "Category: none",
            "supply_train_desert_hills_combat_bonus": "Category: none",
            "warelephant_desert_hills_combat_bonus": "Category: none",
            "liburnian_desert_hills_combat_bonus": "Category: none",
            "trireme_desert_hills_combat_bonus": "Category: none",
            "tetrere_desert_hills_combat_bonus": "Category: none",
            "hexere_desert_hills_combat_bonus": "Category: none",
            "octere_desert_hills_combat_bonus": "Category: none",
            "mega_galley_desert_hills_combat_bonus": "Category: none",
            "flood_plain_combat_bonus": "Category: none",
            "archers_flood_plain_combat_bonus": "Category: none",
            "camels_flood_plain_combat_bonus": "Category: none",
            "chariots_flood_plain_combat_bonus": "Category: none",
            "engineer_cohort_flood_plain_combat_bonus": "Category: none",
            "heavy_cavalry_flood_plain_combat_bonus": "Category: none",
            "heavy_infantry_flood_plain_combat_bonus": "Category: none",
            "horse_archers_flood_plain_combat_bonus": "Category: none",
            "light_cavalry_flood_plain_combat_bonus": "Category: none",
            "light_infantry_flood_plain_combat_bonus": "Category: none",
            "spearmen_flood_plain_combat_bonus": "Category: none",
            "supply_train_flood_plain_combat_bonus": "Category: none",
            "warelephant_flood_plain_combat_bonus": "Category: none",
            "liburnian_flood_plain_combat_bonus": "Category: none",
            "trireme_flood_plain_combat_bonus": "Category: none",
            "tetrere_flood_plain_combat_bonus": "Category: none",
            "hexere_flood_plain_combat_bonus": "Category: none",
            "octere_flood_plain_combat_bonus": "Category: none",
            "mega_galley_flood_plain_combat_bonus": "Category: none",
            "plains_combat_bonus": "Category: none",
            "archers_plains_combat_bonus": "Category: none",
            "camels_plains_combat_bonus": "Category: none",
            "chariots_plains_combat_bonus": "Category: none",
            "engineer_cohort_plains_combat_bonus": "Category: none",
            "heavy_cavalry_plains_combat_bonus": "Category: none",
            "heavy_infantry_plains_combat_bonus": "Category: none",
            "horse_archers_plains_combat_bonus": "Category: none",
            "light_cavalry_plains_combat_bonus": "Category: none",
            "light_infantry_plains_combat_bonus": "Category: none",
            "spearmen_plains_combat_bonus": "Category: none",
            "supply_train_plains_combat_bonus": "Category: none",
            "warelephant_plains_combat_bonus": "Category: none",
            "liburnian_plains_combat_bonus": "Category: none",
            "trireme_plains_combat_bonus": "Category: none",
            "tetrere_plains_combat_bonus": "Category: none",
            "hexere_plains_combat_bonus": "Category: none",
            "octere_plains_combat_bonus": "Category: none",
            "mega_galley_plains_combat_bonus": "Category: none",
            "mountain_combat_bonus": "Category: none",
            "archers_mountain_combat_bonus": "Category: none",
            "camels_mountain_combat_bonus": "Category: none",
            "chariots_mountain_combat_bonus": "Category: none",
            "engineer_cohort_mountain_combat_bonus": "Category: none",
            "heavy_cavalry_mountain_combat_bonus": "Category: none",
            "heavy_infantry_mountain_combat_bonus": "Category: none",
            "horse_archers_mountain_combat_bonus": "Category: none",
            "light_cavalry_mountain_combat_bonus": "Category: none",
            "light_infantry_mountain_combat_bonus": "Category: none",
            "spearmen_mountain_combat_bonus": "Category: none",
            "supply_train_mountain_combat_bonus": "Category: none",
            "warelephant_mountain_combat_bonus": "Category: none",
            "liburnian_mountain_combat_bonus": "Category: none",
            "trireme_mountain_combat_bonus": "Category: none",
            "tetrere_mountain_combat_bonus": "Category: none",
            "hexere_mountain_combat_bonus": "Category: none",
            "octere_mountain_combat_bonus": "Category: none",
            "mega_galley_mountain_combat_bonus": "Category: none",
            "hills_combat_bonus": "Category: none",
            "archers_hills_combat_bonus": "Category: none",
            "camels_hills_combat_bonus": "Category: none",
            "chariots_hills_combat_bonus": "Category: none",
            "engineer_cohort_hills_combat_bonus": "Category: none",
            "heavy_cavalry_hills_combat_bonus": "Category: none",
            "heavy_infantry_hills_combat_bonus": "Category: none",
            "horse_archers_hills_combat_bonus": "Category: none",
            "light_cavalry_hills_combat_bonus": "Category: none",
            "light_infantry_hills_combat_bonus": "Category: none",
            "spearmen_hills_combat_bonus": "Category: none",
            "supply_train_hills_combat_bonus": "Category: none",
            "warelephant_hills_combat_bonus": "Category: none",
            "liburnian_hills_combat_bonus": "Category: none",
            "trireme_hills_combat_bonus": "Category: none",
            "tetrere_hills_combat_bonus": "Category: none",
            "hexere_hills_combat_bonus": "Category: none",
            "octere_hills_combat_bonus": "Category: none",
            "mega_galley_hills_combat_bonus": "Category: none",
            "desert_combat_bonus": "Category: none",
            "archers_desert_combat_bonus": "Category: none",
            "camels_desert_combat_bonus": "Category: none",
            "chariots_desert_combat_bonus": "Category: none",
            "engineer_cohort_desert_combat_bonus": "Category: none",
            "heavy_cavalry_desert_combat_bonus": "Category: none",
            "heavy_infantry_desert_combat_bonus": "Category: none",
            "horse_archers_desert_combat_bonus": "Category: none",
            "light_cavalry_desert_combat_bonus": "Category: none",
            "light_infantry_desert_combat_bonus": "Category: none",
            "spearmen_desert_combat_bonus": "Category: none",
            "supply_train_desert_combat_bonus": "Category: none",
            "warelephant_desert_combat_bonus": "Category: none",
            "liburnian_desert_combat_bonus": "Category: none",
            "trireme_desert_combat_bonus": "Category: none",
            "tetrere_desert_combat_bonus": "Category: none",
            "hexere_desert_combat_bonus": "Category: none",
            "octere_desert_combat_bonus": "Category: none",
            "mega_galley_desert_combat_bonus": "Category: none",
            "marsh_combat_bonus": "Category: none",
            "archers_marsh_combat_bonus": "Category: none",
            "camels_marsh_combat_bonus": "Category: none",
            "chariots_marsh_combat_bonus": "Category: none",
            "engineer_cohort_marsh_combat_bonus": "Category: none",
            "heavy_cavalry_marsh_combat_bonus": "Category: none",
            "heavy_infantry_marsh_combat_bonus": "Category: none",
            "horse_archers_marsh_combat_bonus": "Category: none",
            "light_cavalry_marsh_combat_bonus": "Category: none",
            "light_infantry_marsh_combat_bonus": "Category: none",
            "spearmen_marsh_combat_bonus": "Category: none",
            "supply_train_marsh_combat_bonus": "Category: none",
            "warelephant_marsh_combat_bonus": "Category: none",
            "liburnian_marsh_combat_bonus": "Category: none",
            "trireme_marsh_combat_bonus": "Category: none",
            "tetrere_marsh_combat_bonus": "Category: none",
            "hexere_marsh_combat_bonus": "Category: none",
            "octere_marsh_combat_bonus": "Category: none",
            "mega_galley_marsh_combat_bonus": "Category: none",
            "jungle_combat_bonus": "Category: none",
            "archers_jungle_combat_bonus": "Category: none",
            "camels_jungle_combat_bonus": "Category: none",
            "chariots_jungle_combat_bonus": "Category: none",
            "engineer_cohort_jungle_combat_bonus": "Category: none",
            "heavy_cavalry_jungle_combat_bonus": "Category: none",
            "heavy_infantry_jungle_combat_bonus": "Category: none",
            "horse_archers_jungle_combat_bonus": "Category: none",
            "light_cavalry_jungle_combat_bonus": "Category: none",
            "light_infantry_jungle_combat_bonus": "Category: none",
            "spearmen_jungle_combat_bonus": "Category: none",
            "supply_train_jungle_combat_bonus": "Category: none",
            "warelephant_jungle_combat_bonus": "Category: none",
            "liburnian_jungle_combat_bonus": "Category: none",
            "trireme_jungle_combat_bonus": "Category: none",
            "tetrere_jungle_combat_bonus": "Category: none",
            "hexere_jungle_combat_bonus": "Category: none",
            "octere_jungle_combat_bonus": "Category: none",
            "mega_galley_jungle_combat_bonus": "Category: none",
            "farmland_combat_bonus": "Category: none",
            "archers_farmland_combat_bonus": "Category: none",
            "camels_farmland_combat_bonus": "Category: none",
            "chariots_farmland_combat_bonus": "Category: none",
            "engineer_cohort_farmland_combat_bonus": "Category: none",
            "heavy_cavalry_farmland_combat_bonus": "Category: none",
            "heavy_infantry_farmland_combat_bonus": "Category: none",
            "horse_archers_farmland_combat_bonus": "Category: none",
            "light_cavalry_farmland_combat_bonus": "Category: none",
            "light_infantry_farmland_combat_bonus": "Category: none",
            "spearmen_farmland_combat_bonus": "Category: none",
            "supply_train_farmland_combat_bonus": "Category: none",
            "warelephant_farmland_combat_bonus": "Category: none",
            "liburnian_farmland_combat_bonus": "Category: none",
            "trireme_farmland_combat_bonus": "Category: none",
            "tetrere_farmland_combat_bonus": "Category: none",
            "hexere_farmland_combat_bonus": "Category: none",
            "octere_farmland_combat_bonus": "Category: none",
            "mega_galley_farmland_combat_bonus": "Category: none",
            "forest_combat_bonus": "Category: none",
            "archers_forest_combat_bonus": "Category: none",
            "camels_forest_combat_bonus": "Category: none",
            "chariots_forest_combat_bonus": "Category: none",
            "engineer_cohort_forest_combat_bonus": "Category: none",
            "heavy_cavalry_forest_combat_bonus": "Category: none",
            "heavy_infantry_forest_combat_bonus": "Category: none",
            "horse_archers_forest_combat_bonus": "Category: none",
            "light_cavalry_forest_combat_bonus": "Category: none",
            "light_infantry_forest_combat_bonus": "Category: none",
            "spearmen_forest_combat_bonus": "Category: none",
            "supply_train_forest_combat_bonus": "Category: none",
            "warelephant_forest_combat_bonus": "Category: none",
            "liburnian_forest_combat_bonus": "Category: none",
            "trireme_forest_combat_bonus": "Category: none",
            "tetrere_forest_combat_bonus": "Category: none",
            "hexere_forest_combat_bonus": "Category: none",
            "octere_forest_combat_bonus": "Category: none",
            "mega_galley_forest_combat_bonus": "Category: none",
            "ocean_combat_bonus": "Category: none",
            "archers_ocean_combat_bonus": "Category: none",
            "camels_ocean_combat_bonus": "Category: none",
            "chariots_ocean_combat_bonus": "Category: none",
            "engineer_cohort_ocean_combat_bonus": "Category: none",
            "heavy_cavalry_ocean_combat_bonus": "Category: none",
            "heavy_infantry_ocean_combat_bonus": "Category: none",
            "horse_archers_ocean_combat_bonus": "Category: none",
            "light_cavalry_ocean_combat_bonus": "Category: none",
            "light_infantry_ocean_combat_bonus": "Category: none",
            "spearmen_ocean_combat_bonus": "Category: none",
            "supply_train_ocean_combat_bonus": "Category: none",
            "warelephant_ocean_combat_bonus": "Category: none",
            "liburnian_ocean_combat_bonus": "Category: none",
            "trireme_ocean_combat_bonus": "Category: none",
            "tetrere_ocean_combat_bonus": "Category: none",
            "hexere_ocean_combat_bonus": "Category: none",
            "octere_ocean_combat_bonus": "Category: none",
            "mega_galley_ocean_combat_bonus": "Category: none",
            "coastal_terrain_combat_bonus": "Category: none",
            "archers_coastal_terrain_combat_bonus": "Category: none",
            "camels_coastal_terrain_combat_bonus": "Category: none",
            "chariots_coastal_terrain_combat_bonus": "Category: none",
            "engineer_cohort_coastal_terrain_combat_bonus": "Category: none",
            "heavy_cavalry_coastal_terrain_combat_bonus": "Category: none",
            "heavy_infantry_coastal_terrain_combat_bonus": "Category: none",
            "horse_archers_coastal_terrain_combat_bonus": "Category: none",
            "light_cavalry_coastal_terrain_combat_bonus": "Category: none",
            "light_infantry_coastal_terrain_combat_bonus": "Category: none",
            "spearmen_coastal_terrain_combat_bonus": "Category: none",
            "supply_train_coastal_terrain_combat_bonus": "Category: none",
            "warelephant_coastal_terrain_combat_bonus": "Category: none",
            "liburnian_coastal_terrain_combat_bonus": "Category: none",
            "trireme_coastal_terrain_combat_bonus": "Category: none",
            "tetrere_coastal_terrain_combat_bonus": "Category: none",
            "hexere_coastal_terrain_combat_bonus": "Category: none",
            "octere_coastal_terrain_combat_bonus": "Category: none",
            "mega_galley_coastal_terrain_combat_bonus": "Category: none",
            "riverine_terrain_combat_bonus": "Category: none",
            "archers_riverine_terrain_combat_bonus": "Category: none",
            "camels_riverine_terrain_combat_bonus": "Category: none",
            "chariots_riverine_terrain_combat_bonus": "Category: none",
            "engineer_cohort_riverine_terrain_combat_bonus": "Category: none",
            "heavy_cavalry_riverine_terrain_combat_bonus": "Category: none",
            "heavy_infantry_riverine_terrain_combat_bonus": "Category: none",
            "horse_archers_riverine_terrain_combat_bonus": "Category: none",
            "light_cavalry_riverine_terrain_combat_bonus": "Category: none",
            "light_infantry_riverine_terrain_combat_bonus": "Category: none",
            "spearmen_riverine_terrain_combat_bonus": "Category: none",
            "supply_train_riverine_terrain_combat_bonus": "Category: none",
            "warelephant_riverine_terrain_combat_bonus": "Category: none",
            "liburnian_riverine_terrain_combat_bonus": "Category: none",
            "trireme_riverine_terrain_combat_bonus": "Category: none",
            "tetrere_riverine_terrain_combat_bonus": "Category: none",
            "hexere_riverine_terrain_combat_bonus": "Category: none",
            "octere_riverine_terrain_combat_bonus": "Category: none",
            "mega_galley_riverine_terrain_combat_bonus": "Category: none",
            "impassable_terrain_combat_bonus": "Category: none",
            "archers_impassable_terrain_combat_bonus": "Category: none",
            "camels_impassable_terrain_combat_bonus": "Category: none",
            "chariots_impassable_terrain_combat_bonus": "Category: none",
            "engineer_cohort_impassable_terrain_combat_bonus": "Category: none",
            "heavy_cavalry_impassable_terrain_combat_bonus": "Category: none",
            "heavy_infantry_impassable_terrain_combat_bonus": "Category: none",
            "horse_archers_impassable_terrain_combat_bonus": "Category: none",
            "light_cavalry_impassable_terrain_combat_bonus": "Category: none",
            "light_infantry_impassable_terrain_combat_bonus": "Category: none",
            "spearmen_impassable_terrain_combat_bonus": "Category: none",
            "supply_train_impassable_terrain_combat_bonus": "Category: none",
            "warelephant_impassable_terrain_combat_bonus": "Category: none",
            "liburnian_impassable_terrain_combat_bonus": "Category: none",
            "trireme_impassable_terrain_combat_bonus": "Category: none",
            "tetrere_impassable_terrain_combat_bonus": "Category: none",
            "hexere_impassable_terrain_combat_bonus": "Category: none",
            "octere_impassable_terrain_combat_bonus": "Category: none",
            "mega_galley_impassable_terrain_combat_bonus": "Category: none",
            "monthly_optimates_party_conviction": "Category: character",
            "optimates_party_influence": "Category: country",
            "monthly_boni_party_conviction": "Category: character",
            "boni_party_influence": "Category: country",
            "monthly_populares_party_conviction": "Category: character",
            "populares_party_influence": "Category: country",
            "monthly_oligarchic_party_conviction": "Category: character",
            "oligarchic_party_influence": "Category: country",
            "monthly_traditionalist_party_conviction": "Category: character",
            "traditionalist_party_influence": "Category: country",
            "monthly_democratic_party_conviction": "Category: character",
            "democratic_party_influence": "Category: country",
            "military_tech_investment": "Category: country",
            "civic_tech_investment": "Category: country",
            "oratory_tech_investment": "Category: country",
            "religious_tech_investment": "Category: country",
            "fortress_building_cost": "Category: country",
            "fortress_ramparts_building_cost": "Category: country",
            "port_building_cost": "Category: country",
            "barracks_building_cost": "Category: country",
            "foundry_building_cost": "Category: country",
            "aqueduct_building_cost": "Category: country",
            "temple_building_cost": "Category: country",
            "population_building_cost": "Category: country",
            "theathre_building_cost": "Category: country",
            "library_building_cost": "Category: country",
            "academy_building_cost": "Category: country",
            "commerce_building_cost": "Category: country",
            "court_building_cost": "Category: country",
            "military_building_cost": "Category: country",
            "forum_building_cost": "Category: country",
            "town_hall_building_cost": "Category: country",
            "workshop_building_cost": "Category: country",
            "latifundia_building_cost": "Category: country",
            "slave_mine_building_cost": "Category: country",
            "basic_settlement_infratructure_building_cost": "Category: country",
            "hill_fort_cost": "Category: country",
            "local_forum_building_cost": "Category: country",
        }

        self.simple_completion_pattern_flag_pairs = [
            (["color", "color1", "color2", "color3", "color4", "color5"], manager.named_colors.name),
            (["set_ambition", "has_ambition"], manager.ambition.name),
            (["can_build_building", "has_building", "add_building_level", "remove_building_level"], manager.building.name),
            (["set_culture", "set_pop_culture", "set_primary_culture", "primary_culture", "dominant_province_culture"], manager.culture.name),
            (["has_culture_group", "country_culture_group"], manager.culture_group.name),
            (["death_reason"], manager.death_reason.name),
            (["diplomatic_stance"], manager.diplo_stance.name),
            (["has_low_economic_policy", "has_mid_economic_policy", "has_high_economic_policy"], manager.econ_policy.name),
            (["picture"], manager.event_pic.name),
            (["theme"], manager.event_theme.name),
            (["set_trade_goods", "can_import_trade_good", "trade_goods", "is_importing_trade_good"], manager.trade_good.name),
            (["government", "change_government"], manager.government.name),
            (["governor_policy", "can_change_governor_policy"], manager.governor_policy.name),
            (["heritage", "set_country_heritage"], manager.heritage.name),
            (["can_change_idea", "idea"], manager.idea.name),
            (["invention"], manager.invention.name),
            (["has_law", "change_law"], manager.law.name),
            (["levy_template"], manager.levy_template.name),
            (["can_add_entire_loyalty_bonus", "has_loyalty", "remove_loyalty", "add_loyalty"], manager.loyalty.name),
            (["has_military_bonus"], manager.mil_tradition.name),
            (["has_completed_mission"], manager.mission.name),
            (["has_completed_mission_task"], manager.mission_task.name),
            (["has_unit_modifier", "has_country_modifier", "has_province_modifier", "has_character_modifier", "has_triggered_character_modifier", "has_state_modifier", "has_country_culture_modifier", "remove_triggered_character_modifier", "remove_country_modifier", "remove_province_modifier", "add_country_modifier", "remove_unit_modifier", "remove_character_modifier", "add_unit_modifier", "add_permanent_province_modifier", "add_province_modifier", "remove_state_modifier", "add_character_modifier", "add_state_modifier", "add_triggered_character_modifier"], manager.modifier.name),
            (["has_opinion"], manager.opinion.name),
            (["give_office", "remove_office", "can_hold_office", "office_is_empty", "has_office"], manager.office.name),
            (["remove_party_leadership", "party", "is_leader_of_party", "is_leader_of_party_type", "party_type", "has_party_type", "is_party_type"], manager.party.name),
            (["create_pop", "set_pop_type", "create_state_pop", "pop_type", "has_pop_type_right", "is_pop_type_right"], manager.pop.name),
            (["subject_pays", "pay_price", "refund_price", "can_pay_price"], manager.price.name),
            (["set_city_status", "has_province_rank"], manager.province_rank.name),
            (["set_character_religion", "set_pop_religion", "set_country_religion", "has_religion", "pop_religion", "religion", "dominant_province_religion", "deity_religion", "religion"], manager.religion.name),
            (["is_subject_type"], manager.subject_type.name),
            (["has_tech_office_of"], manager.tech_table.name),
            (["terrain"], manager.terrain.name),
            (["force_add_trait", "add_trait", "remove_trait", "has_trait"], manager.trait.name),
            (["add_loyal_subunit", "add_subunit", "is_dominant_unit", "sub_unit_type"], manager.unit.name),
            (["war_goal"], manager.war_goal.name),
            (["area", "is_in_area", "owns_or_subject_owns_area", "owns_area"], manager.area.name),
            (["region", "owns_or_subject_owns_region", "owns_region", "is_in_region"], manager.region.name),
        ]

        self.simple_completion_scope_pattern_flag_pairs = [
            ("area:", manager.area.name),
            ("culture:", manager.culture.name),
            ("culture_group:", manager.culture_group.name),
            ("deity:", manager.deity.name),
            ("party:", manager.party.name),
            ("region:", manager.region.name),
            ("religion:", manager.religion.name),
        ]

        self.data_system_completion_flag_pairs = [
            (manager.mil_tradition.name, (sublime.KIND_ID_VARIABLE, "L", "Military Traditions")),
            (manager.scripted_gui.name, (sublime.KIND_ID_SNIPPET, "S", "Scripted Gui")),
            (manager.building.name, (sublime.KIND_ID_FUNCTION, "B", "Buildings")),
            (manager.culture.name, (sublime.KIND_ID_TYPE, "C", "Culture Groups")),
            (manager.culture_group.name, (sublime.KIND_ID_VARIABLE, "C", "Cultures")),
            (manager.custom_loc.name, (sublime.KIND_ID_VARIABLE, "C", "Custom Localization")),
            (manager.deity.name, (sublime.KIND_ID_TYPE, "D", "Deities")),
            (manager.diplo_stance.name, (sublime.KIND_ID_SNIPPET, "D", "Diplo Stances")),
            (manager.heritage.name, (sublime.KIND_ID_VARIABLE, "G", "Heritages")),
            (manager.invention.name, (sublime.KIND_ID_MARKUP, "H", "Inventions")),
            (manager.legion_distinction.name, (sublime.KIND_ID_TYPE, "I", "Legion Distinction")),
            (manager.loyalty.name, (sublime.KIND_ID_VARIABLE, "L", "Loyalties")),
            (manager.modifier.name, (sublime.KIND_ID_MARKUP, "M", "Modifiers")),
            (manager.office.name, (sublime.KIND_ID_NAMESPACE, "O", "Offices")),
            (manager.price.name, (sublime.KIND_ID_NAVIGATION, "P", "Prices")),
            (manager.province_rank.name, (sublime.KIND_ID_VARIABLE, "P", "Province Ranks")),
            (manager.religion.name, (sublime.KIND_ID_VARIABLE, "R", "Religions")),
            (manager.terrain.name, (sublime.KIND_ID_SNIPPET, "T", "Terrains")),
            (manager.trade_good.name, (sublime.KIND_ID_KEYWORD, "T", "Trade Goods")),
            (manager.trait.name, (sublime.KIND_ID_VARIABLE, "T", "Traits")),
            (manager.script_value.name, (sublime.KIND_ID_NAMESPACE, "S", "Script Value")),
        ]

        self.data_system_completion_functions = [
            (manager.building.name, "GetBuilding"),
            (manager.culture.name, "GetCulture"),
            (manager.culture_group.name, "GetCultureGroup"),
            (manager.custom_loc.name, "Custom"),
            (manager.deity.name, "GetDeityDefinition"),
            (manager.diplo_stance.name, "GetDiplomaticStance"),
            (manager.heritage.name, "GetHeritage"),
            (manager.invention.name, "GetInvention"),
            (manager.legion_distinction.name, "GetLegionDistinction"),
            (manager.loyalty.name, "GetLoyaltyEntry"),
            (manager.mil_tradition.name, "GetMilitaryBonus"),
            (manager.modifier.name, "GetModifier"),
            (manager.office.name, "GetOffice"),
            (manager.price.name, "GetPrice"),
            (manager.province_rank.name, "GetProvinceRank"),
            (manager.script_value.name, "ScriptValue"),
            (manager.religion.name, "GetReligion"),
            (manager.scripted_gui.name, "GetScriptedGui"),
            (manager.terrain.name, "GetTerrainType"),
            (manager.trade_good.name, "GetTradeGood"),
            (manager.trait.name, "GetTrait"),
        ]

        self.completion_flag_pairs = [
            (manager.ambition.name, (sublime.KIND_ID_FUNCTION, "A", "Ambitions")),
            (manager.area.name, (sublime.KIND_ID_SNIPPET, "A", "Areas")),
            (manager.building.name, (sublime.KIND_ID_FUNCTION, "B", "Buildings")),
            (manager.culture.name, (sublime.KIND_ID_TYPE, "C", "Culture Groups")),
            (manager.culture_group.name, (sublime.KIND_ID_VARIABLE, "C", "Cultures")),
            (manager.custom_loc.name, (sublime.KIND_ID_VARIABLE, "C", "Custom Localization")),
            (manager.death_reason.name, (sublime.KIND_ID_KEYWORD, "D", "Death Reasons")),
            (manager.deity.name, (sublime.KIND_ID_TYPE, "D", "Deities")),
            (manager.diplo_stance.name, (sublime.KIND_ID_SNIPPET, "D", "Diplo Stances")),
            (manager.econ_policy.name, (sublime.KIND_ID_KEYWORD, "E", "Economic Policies")),
            (manager.event_pic.name, (sublime.KIND_ID_MARKUP, "E", "Event Picture")),
            (manager.event_theme.name, (sublime.KIND_ID_TYPE, "E", "Event Themes")),
            (manager.government.name, (sublime.KIND_ID_VARIABLE, "E", "Governements")),
            (manager.governor_policy.name, (sublime.KIND_ID_TYPE, "G", "Governor Policies")),
            (manager.heritage.name, (sublime.KIND_ID_VARIABLE, "G", "Heritages")),
            (manager.idea.name, (sublime.KIND_ID_SNIPPET, "G", "Ideas")),
            (manager.invention.name, (sublime.KIND_ID_MARKUP, "H", "Inventions")),
            (manager.law.name, (sublime.KIND_ID_VARIABLE, "I", "Laws")),
            (manager.legion_distinction.name, (sublime.KIND_ID_TYPE, "I", "Legion Distinction")),
            (manager.levy_template.name, (sublime.KIND_ID_SNIPPET, "L", "Levy Templates")),
            (manager.loyalty.name, (sublime.KIND_ID_VARIABLE, "L", "Loyalties")),
            (manager.mil_tradition.name, (sublime.KIND_ID_VARIABLE, "L", "Military Traditions")),
            (manager.mission.name, (sublime.KIND_ID_SNIPPET, "M", "Missions")),
            (manager.mission_task.name, (sublime.KIND_ID_SNIPPET, "M", "Mission Tasks")),
            (manager.modifier.name, (sublime.KIND_ID_MARKUP, "M", "Modifiers")),
            (manager.named_colors.name, (sublime.KIND_ID_VARIABLE, "N", "Named Colors")),
            (manager.office.name, (sublime.KIND_ID_NAMESPACE, "O", "Offices")),
            (manager.opinion.name, (sublime.KIND_ID_VARIABLE, "O", "Opinions")),
            (manager.party.name, (sublime.KIND_ID_TYPE, "P", "Parties")),
            (manager.pop.name, (sublime.KIND_ID_VARIABLE, "P", "Pops")),
            (manager.price.name, (sublime.KIND_ID_NAVIGATION, "P", "Prices")),
            (manager.province_rank.name, (sublime.KIND_ID_VARIABLE, "P", "Province Ranks")),
            (manager.region.name, (sublime.KIND_ID_SNIPPET, "R", "Regions")),
            (manager.religion.name, (sublime.KIND_ID_VARIABLE, "R", "Religions")),
            (manager.subject_type.name, (sublime.KIND_ID_SNIPPET, "S", "Subject Types")),
            (manager.tech_table.name, (sublime.KIND_ID_VARIABLE, "T", "Tech Tables")),
            (manager.terrain.name, (sublime.KIND_ID_SNIPPET, "T", "Terrains")),
            (manager.trade_good.name, (sublime.KIND_ID_KEYWORD, "T", "Trade Goods")),
            (manager.trait.name, (sublime.KIND_ID_VARIABLE, "T", "Traits")),
            (manager.unit.name, (sublime.KIND_ID_FUNCTION, "U", "Units")),
            (manager.war_goal.name, (sublime.KIND_ID_FUNCTION, "W", "War Goals")),
        ]
